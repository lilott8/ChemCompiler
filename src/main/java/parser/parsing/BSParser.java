/* BSParser.java */
/* Generated By:JavaCC: Do not edit this line. BSParser.java */
package parser.parsing;

import parser.ast.AndExpression;
import parser.ast.AssignmentInstruction;
import parser.ast.BSProgram;
import parser.ast.BranchStatement;
import parser.ast.DetectStatement;
import parser.ast.DrainStatement;
import parser.ast.ElseIfStatement;
import parser.ast.ElseStatement;
import parser.ast.EqualityExpression;
import parser.ast.Expression;
import parser.ast.ExpressionList;
import parser.ast.ExpressionRest;
import parser.ast.FalseLiteral;
import parser.ast.FormalParameter;
import parser.ast.FormalParameterList;
import parser.ast.FormalParameterRest;
import parser.ast.Function;
import parser.ast.FunctionInvoke;
import parser.ast.GreaterThanEqualExpression;
import parser.ast.GreaterThanExpression;
import parser.ast.HeatStatement;
import parser.ast.Identifier;
import parser.ast.InstructionAssignment;
import parser.ast.IntegerLiteral;
import parser.ast.LessThanEqualExpression;
import parser.ast.LessThanExpression;
import parser.ast.Manifest;
import parser.ast.MatLiteral;
import parser.ast.MinusExpression;
import parser.ast.MixStatement;
import parser.ast.Module;
import parser.ast.NatLiteral;
import parser.ast.NodeChoice;
import parser.ast.NodeList;
import parser.ast.NodeListOptional;
import parser.ast.NodeOptional;
import parser.ast.NodeSequence;
import parser.ast.NodeToken;
import parser.ast.NotEqualExpression;
import parser.ast.NotExpression;
import parser.ast.OrExpression;
import parser.ast.ParenthesisExpression;
import parser.ast.PlusExpression;
import parser.ast.PrimaryExpression;
import parser.ast.RealLiteral;
import parser.ast.RepeatStatement;
import parser.ast.Sequence;
import parser.ast.SplitStatement;
import parser.ast.Statement;
import parser.ast.Stationary;
import parser.ast.TimesExpression;
import parser.ast.TrueLiteral;
import parser.ast.Type;
import parser.ast.TypingList;
import parser.ast.TypingRest;


public class BSParser implements BSParserConstants {

    static private int[] jj_la1_0;
    static private int[] jj_la1_1;

    static {
        jj_la1_init_0();
        jj_la1_init_1();
    }

    final private int[] jj_la1 = new int[31];
    final private JJCalls[] jj_2_rtns = new JJCalls[15];
    final private LookaheadSuccess jj_ls = new LookaheadSuccess();
    /**
     * Generated Token Manager.
     */
    public BSParserTokenManager token_source;
    /**
     * Current token.
     */
    public Token token;
    /**
     * Next token.
     */
    public Token jj_nt;
    JavaCharStream jj_input_stream;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    private int jj_gen;
    private boolean jj_rescan = false;
    private int jj_gc = 0;
    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    /**
     * Constructor with InputStream.
     */
    public BSParser(java.io.InputStream stream) {
        this(stream, null);
    }

    /**
     * Constructor with InputStream and supplied encoding
     */
    public BSParser(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new JavaCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new BSParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 31; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Constructor.
     */
    public BSParser(java.io.Reader stream) {
        jj_input_stream = new JavaCharStream(stream, 1, 1);
        token_source = new BSParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 31; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Constructor with generated Token Manager.
     */
    public BSParser(BSParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 31; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{0x8000000, 0x20000, 0x40000, 0x7806300, 0x7000000, 0x7000000, 0x7806300, 0x6300, 0x7000000, 0x7000000, 0x0, 0x7006300, 0x20000000, 0x0, 0x3000000, 0x0, 0x7000000, 0x400, 0x400, 0x400, 0x7006300, 0x7006300, 0x8000, 0x10000, 0x7006300, 0x7006300, 0x400010c0, 0x400010c0, 0x0, 0x10c0, 0x40000000,};
    }

    private static void jj_la1_init_1() {
        jj_la1_1 = new int[]{0x0, 0x0, 0x0, 0x1000000, 0x0, 0x0, 0x1000000, 0x1000000, 0x0, 0x1000000, 0x400000, 0x1000000, 0x0, 0x200000, 0x0, 0x200000, 0x0, 0x0, 0x0, 0x0, 0x1000000, 0x1000000, 0x0, 0x0, 0x1000000, 0x1000000, 0x1980000, 0x1980000, 0x200000, 0x1000000, 0x980000,};
    }

    final public BSProgram BSProgram() throws ParseException {
        NodeListOptional n0 = new NodeListOptional();
        Module n1;
        NodeListOptional n2 = new NodeListOptional();
        Stationary n3;
        NodeList n4 = new NodeList();
        Manifest n5;
        NodeToken n6;
        Token n7;
        NodeList n8 = new NodeList();
        Sequence n9;
        NodeToken n10;
        Token n11;
        label_1:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case MODULE: {
                    break;
                }
                default:
                    jj_la1[0] = jj_gen;
                    break label_1;
            }
            n1 = Module();
            n0.addNode(n1);
        }
        n0.nodes.trimToSize();
        label_2:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case STATIONARY: {
                    break;
                }
                default:
                    jj_la1[1] = jj_gen;
                    break label_2;
            }
            n3 = Stationary();
            n2.addNode(n3);
        }
        n2.nodes.trimToSize();
        label_3:
        while (true) {
            n5 = Manifest();
            n4.addNode(n5);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case MANIFEST: {
                    break;
                }
                default:
                    jj_la1[2] = jj_gen;
                    break label_3;
            }
        }
        n4.nodes.trimToSize();
        n7 = jj_consume_token(INSTRUCTIONS);
        n6 = JTBToolkit.makeNodeToken(n7);
        label_4:
        while (true) {
            n9 = Sequence();
            n8.addNode(n9);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case DRAIN:
                case HEAT:
                case REPEAT:
                case IF:
                case FUNCTION:
                case REAL:
                case NAT:
                case MAT:
                case IDENTIFIER: {
                    break;
                }
                default:
                    jj_la1[3] = jj_gen;
                    break label_4;
            }
        }
        n8.nodes.trimToSize();
        n11 = jj_consume_token(0);
        n11.beginColumn++;
        n11.endColumn++;
        n10 = JTBToolkit.makeNodeToken(n11);
        {
            if ("" != null) return new BSProgram(n0, n2, n4, n6, n8, n10);
        }
        throw new Error("Missing return statement in function");
    }

    final public Module Module() throws ParseException {
        NodeToken n0;
        Token n1;
        Identifier n2;
        n1 = jj_consume_token(MODULE);
        n0 = JTBToolkit.makeNodeToken(n1);
        n2 = Identifier();
        {
            if ("" != null) return new Module(n0, n2);
        }
        throw new Error("Missing return statement in function");
    }

    final public Stationary Stationary() throws ParseException {
        NodeToken n0;
        Token n1;
        NodeOptional n2 = new NodeOptional();
        TypingList n3;
        PrimaryExpression n4;
        n1 = jj_consume_token(STATIONARY);
        n0 = JTBToolkit.makeNodeToken(n1);
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case REAL:
            case NAT:
            case MAT: {
                n3 = TypingList();
                n2.addNode(n3);
                break;
            }
            default:
                jj_la1[4] = jj_gen;
        }
        n4 = PrimaryExpression();
        {
            if ("" != null) return new Stationary(n0, n2, n4);
        }
        throw new Error("Missing return statement in function");
    }

    final public Manifest Manifest() throws ParseException {
        NodeToken n0;
        Token n1;
        NodeOptional n2 = new NodeOptional();
        TypingList n3;
        PrimaryExpression n4;
        n1 = jj_consume_token(MANIFEST);
        n0 = JTBToolkit.makeNodeToken(n1);
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case REAL:
            case NAT:
            case MAT: {
                n3 = TypingList();
                n2.addNode(n3);
                break;
            }
            default:
                jj_la1[5] = jj_gen;
        }
        n4 = PrimaryExpression();
        {
            if ("" != null) return new Manifest(n0, n2, n4);
        }
        throw new Error("Missing return statement in function");
    }

    final public Sequence Sequence() throws ParseException {
        NodeChoice n0;
        Function n1;
        Statement n2;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case FUNCTION: {
                n1 = Function();
                n0 = new NodeChoice(n1, 0);
                break;
            }
            case DRAIN:
            case HEAT:
            case REPEAT:
            case IF:
            case REAL:
            case NAT:
            case MAT:
            case IDENTIFIER: {
                n2 = Statement();
                n0 = new NodeChoice(n2, 1);
                break;
            }
            default:
                jj_la1[6] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {
            if ("" != null) return new Sequence(n0);
        }
        throw new Error("Missing return statement in function");
    }

    final public Statement Statement() throws ParseException {
        NodeChoice n0;
        AssignmentInstruction n1;
        BranchStatement n2;
        RepeatStatement n3;
        HeatStatement n4;
        DrainStatement n5;
        FunctionInvoke n6;
        if (jj_2_1(2147483647)) {
            n1 = AssignmentInstruction();
            n0 = new NodeChoice(n1, 0);
        } else {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case IF: {
                    n2 = BranchStatement();
                    n0 = new NodeChoice(n2, 1);
                    break;
                }
                case REPEAT: {
                    n3 = RepeatStatement();
                    n0 = new NodeChoice(n3, 2);
                    break;
                }
                case HEAT: {
                    n4 = HeatStatement();
                    n0 = new NodeChoice(n4, 3);
                    break;
                }
                case DRAIN: {
                    n5 = DrainStatement();
                    n0 = new NodeChoice(n5, 4);
                    break;
                }
                case IDENTIFIER: {
                    n6 = FunctionInvoke();
                    n0 = new NodeChoice(n6, 5);
                    break;
                }
                default:
                    jj_la1[7] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if ("" != null) return new Statement(n0);
        }
        throw new Error("Missing return statement in function");
    }

    final public AssignmentInstruction AssignmentInstruction() throws ParseException {
        NodeListOptional n0 = new NodeListOptional();
        TypingList n1;
        Identifier n2;
        NodeToken n3;
        Token n4;
        Expression n5;
        label_5:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case REAL:
                case NAT:
                case MAT: {
                    break;
                }
                default:
                    jj_la1[8] = jj_gen;
                    break label_5;
            }
            n1 = TypingList();
            n0.addNode(n1);
        }
        n0.nodes.trimToSize();
        n2 = Identifier();
        n4 = jj_consume_token(ASSIGN);
        n3 = JTBToolkit.makeNodeToken(n4);
        n5 = Expression();
        {
            if ("" != null) return new AssignmentInstruction(n0, n2, n3, n5);
        }
        throw new Error("Missing return statement in function");
    }

    final public Function Function() throws ParseException {
        NodeToken n0;
        Token n1;
        Identifier n2;
        NodeToken n3;
        Token n4;
        NodeListOptional n5 = new NodeListOptional();
        FormalParameterList n6;
        NodeToken n7;
        Token n8;
        NodeOptional n9 = new NodeOptional();
        NodeSequence n10;
        NodeToken n11;
        Token n12;
        TypingList n13;
        NodeToken n14;
        Token n15;
        NodeList n16 = new NodeList();
        Statement n17;
        NodeOptional n18 = new NodeOptional();
        NodeSequence n19;
        NodeToken n20;
        Token n21;
        Expression n22;
        NodeToken n23;
        Token n24;
        n1 = jj_consume_token(FUNCTION);
        n0 = JTBToolkit.makeNodeToken(n1);
        n2 = Identifier();
        n4 = jj_consume_token(LPAREN);
        n3 = JTBToolkit.makeNodeToken(n4);
        label_6:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case REAL:
                case NAT:
                case MAT:
                case IDENTIFIER: {
                    break;
                }
                default:
                    jj_la1[9] = jj_gen;
                    break label_6;
            }
            n6 = FormalParameterList();
            n5.addNode(n6);
        }
        n5.nodes.trimToSize();
        n8 = jj_consume_token(RPAREN);
        n7 = JTBToolkit.makeNodeToken(n8);
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case COLON: {
                n10 = new NodeSequence(2);
                n12 = jj_consume_token(COLON);
                n11 = JTBToolkit.makeNodeToken(n12);
                n10.addNode(n11);
                n13 = TypingList();
                n10.addNode(n13);
                n9.addNode(n10);
                break;
            }
            default:
                jj_la1[10] = jj_gen;
        }
        n15 = jj_consume_token(LBRACE);
        n14 = JTBToolkit.makeNodeToken(n15);
        label_7:
        while (true) {
            n17 = Statement();
            n16.addNode(n17);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case DRAIN:
                case HEAT:
                case REPEAT:
                case IF:
                case REAL:
                case NAT:
                case MAT:
                case IDENTIFIER: {
                    break;
                }
                default:
                    jj_la1[11] = jj_gen;
                    break label_7;
            }
        }
        n16.nodes.trimToSize();
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case RETURN: {
                n19 = new NodeSequence(2);
                n21 = jj_consume_token(RETURN);
                n20 = JTBToolkit.makeNodeToken(n21);
                n19.addNode(n20);
                n22 = Expression();
                n19.addNode(n22);
                n18.addNode(n19);
                break;
            }
            default:
                jj_la1[12] = jj_gen;
        }
        n24 = jj_consume_token(RBRACE);
        n23 = JTBToolkit.makeNodeToken(n24);
        {
            if ("" != null) return new Function(n0, n2, n3, n5, n7, n9, n14, n16, n18, n23);
        }
        throw new Error("Missing return statement in function");
    }

    final public TypingList TypingList() throws ParseException {
        Type n0;
        NodeListOptional n1 = new NodeListOptional();
        TypingRest n2;
        n0 = Type();
        label_8:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case COMMA: {
                    break;
                }
                default:
                    jj_la1[13] = jj_gen;
                    break label_8;
            }
            n2 = TypingRest();
            n1.addNode(n2);
        }
        n1.nodes.trimToSize();
        {
            if ("" != null) return new TypingList(n0, n1);
        }
        throw new Error("Missing return statement in function");
    }

    final public Type Type() throws ParseException {
        NodeChoice n0;
        MatLiteral n1;
        NatLiteral n2;
        RealLiteral n3;
        if (jj_2_2(3)) {
            n1 = MatLiteral();
            n0 = new NodeChoice(n1, 0);
        } else {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case NAT: {
                    n2 = NatLiteral();
                    n0 = new NodeChoice(n2, 1);
                    break;
                }
                case REAL: {
                    n3 = RealLiteral();
                    n0 = new NodeChoice(n3, 2);
                    break;
                }
                default:
                    jj_la1[14] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if ("" != null) return new Type(n0);
        }
        throw new Error("Missing return statement in function");
    }

    final public TypingRest TypingRest() throws ParseException {
        NodeToken n0;
        Token n1;
        Type n2;
        n1 = jj_consume_token(COMMA);
        n0 = JTBToolkit.makeNodeToken(n1);
        n2 = Type();
        {
            if ("" != null) return new TypingRest(n0, n2);
        }
        throw new Error("Missing return statement in function");
    }

    final public FormalParameterList FormalParameterList() throws ParseException {
        FormalParameter n0;
        NodeListOptional n1 = new NodeListOptional();
        FormalParameterRest n2;
        n0 = FormalParameter();
        label_9:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case COMMA: {
                    break;
                }
                default:
                    jj_la1[15] = jj_gen;
                    break label_9;
            }
            n2 = FormalParameterRest();
            n1.addNode(n2);
        }
        n1.nodes.trimToSize();
        {
            if ("" != null) return new FormalParameterList(n0, n1);
        }
        throw new Error("Missing return statement in function");
    }

    final public FormalParameter FormalParameter() throws ParseException {
        NodeListOptional n0 = new NodeListOptional();
        TypingList n1;
        Identifier n2;
        label_10:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case REAL:
                case NAT:
                case MAT: {
                    break;
                }
                default:
                    jj_la1[16] = jj_gen;
                    break label_10;
            }
            n1 = TypingList();
            n0.addNode(n1);
        }
        n0.nodes.trimToSize();
        n2 = Identifier();
        {
            if ("" != null) return new FormalParameter(n0, n2);
        }
        throw new Error("Missing return statement in function");
    }

    final public FormalParameterRest FormalParameterRest() throws ParseException {
        NodeToken n0;
        Token n1;
        FormalParameter n2;
        n1 = jj_consume_token(COMMA);
        n0 = JTBToolkit.makeNodeToken(n1);
        n2 = FormalParameter();
        {
            if ("" != null) return new FormalParameterRest(n0, n2);
        }
        throw new Error("Missing return statement in function");
    }

    final public MixStatement MixStatement() throws ParseException {
        NodeToken n0;
        Token n1;
        PrimaryExpression n2;
        NodeToken n3;
        Token n4;
        PrimaryExpression n5;
        NodeOptional n6 = new NodeOptional();
        NodeSequence n7;
        NodeToken n8;
        Token n9;
        IntegerLiteral n10;
        n1 = jj_consume_token(MIX);
        n0 = JTBToolkit.makeNodeToken(n1);
        n2 = PrimaryExpression();
        n4 = jj_consume_token(WITH);
        n3 = JTBToolkit.makeNodeToken(n4);
        n5 = PrimaryExpression();
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case FOR: {
                n7 = new NodeSequence(2);
                n9 = jj_consume_token(FOR);
                n8 = JTBToolkit.makeNodeToken(n9);
                n7.addNode(n8);
                n10 = IntegerLiteral();
                n7.addNode(n10);
                n6.addNode(n7);
                break;
            }
            default:
                jj_la1[17] = jj_gen;
        }
        {
            if ("" != null) return new MixStatement(n0, n2, n3, n5, n6);
        }
        throw new Error("Missing return statement in function");
    }

    final public SplitStatement SplitStatement() throws ParseException {
        NodeToken n0;
        Token n1;
        PrimaryExpression n2;
        NodeToken n3;
        Token n4;
        IntegerLiteral n5;
        n1 = jj_consume_token(SPLIT);
        n0 = JTBToolkit.makeNodeToken(n1);
        n2 = PrimaryExpression();
        n4 = jj_consume_token(INTO);
        n3 = JTBToolkit.makeNodeToken(n4);
        n5 = IntegerLiteral();
        {
            if ("" != null) return new SplitStatement(n0, n2, n3, n5);
        }
        throw new Error("Missing return statement in function");
    }

    final public DrainStatement DrainStatement() throws ParseException {
        NodeToken n0;
        Token n1;
        PrimaryExpression n2;
        n1 = jj_consume_token(DRAIN);
        n0 = JTBToolkit.makeNodeToken(n1);
        n2 = PrimaryExpression();
        {
            if ("" != null) return new DrainStatement(n0, n2);
        }
        throw new Error("Missing return statement in function");
    }

    final public HeatStatement HeatStatement() throws ParseException {
        NodeToken n0;
        Token n1;
        PrimaryExpression n2;
        NodeToken n3;
        Token n4;
        IntegerLiteral n5;
        NodeOptional n6 = new NodeOptional();
        NodeSequence n7;
        NodeToken n8;
        Token n9;
        IntegerLiteral n10;
        n1 = jj_consume_token(HEAT);
        n0 = JTBToolkit.makeNodeToken(n1);
        n2 = PrimaryExpression();
        n4 = jj_consume_token(AT);
        n3 = JTBToolkit.makeNodeToken(n4);
        n5 = IntegerLiteral();
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case FOR: {
                n7 = new NodeSequence(2);
                n9 = jj_consume_token(FOR);
                n8 = JTBToolkit.makeNodeToken(n9);
                n7.addNode(n8);
                n10 = IntegerLiteral();
                n7.addNode(n10);
                n6.addNode(n7);
                break;
            }
            default:
                jj_la1[18] = jj_gen;
        }
        {
            if ("" != null) return new HeatStatement(n0, n2, n3, n5, n6);
        }
        throw new Error("Missing return statement in function");
    }

    final public DetectStatement DetectStatement() throws ParseException {
        NodeToken n0;
        Token n1;
        PrimaryExpression n2;
        NodeToken n3;
        Token n4;
        PrimaryExpression n5;
        NodeOptional n6 = new NodeOptional();
        NodeSequence n7;
        NodeToken n8;
        Token n9;
        IntegerLiteral n10;
        n1 = jj_consume_token(DETECT);
        n0 = JTBToolkit.makeNodeToken(n1);
        n2 = PrimaryExpression();
        n4 = jj_consume_token(ON);
        n3 = JTBToolkit.makeNodeToken(n4);
        n5 = PrimaryExpression();
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case FOR: {
                n7 = new NodeSequence(2);
                n9 = jj_consume_token(FOR);
                n8 = JTBToolkit.makeNodeToken(n9);
                n7.addNode(n8);
                n10 = IntegerLiteral();
                n7.addNode(n10);
                n6.addNode(n7);
                break;
            }
            default:
                jj_la1[19] = jj_gen;
        }
        {
            if ("" != null) return new DetectStatement(n0, n2, n3, n5, n6);
        }
        throw new Error("Missing return statement in function");
    }

    final public RepeatStatement RepeatStatement() throws ParseException {
        NodeToken n0;
        Token n1;
        IntegerLiteral n2;
        NodeToken n3;
        Token n4;
        NodeToken n5;
        Token n6;
        NodeList n7 = new NodeList();
        Statement n8;
        NodeToken n9;
        Token n10;
        n1 = jj_consume_token(REPEAT);
        n0 = JTBToolkit.makeNodeToken(n1);
        n2 = IntegerLiteral();
        n4 = jj_consume_token(TIMES);
        n3 = JTBToolkit.makeNodeToken(n4);
        n6 = jj_consume_token(LBRACE);
        n5 = JTBToolkit.makeNodeToken(n6);
        label_11:
        while (true) {
            n8 = Statement();
            n7.addNode(n8);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case DRAIN:
                case HEAT:
                case REPEAT:
                case IF:
                case REAL:
                case NAT:
                case MAT:
                case IDENTIFIER: {
                    break;
                }
                default:
                    jj_la1[20] = jj_gen;
                    break label_11;
            }
        }
        n7.nodes.trimToSize();
        n10 = jj_consume_token(RBRACE);
        n9 = JTBToolkit.makeNodeToken(n10);
        {
            if ("" != null) return new RepeatStatement(n0, n2, n3, n5, n7, n9);
        }
        throw new Error("Missing return statement in function");
    }

    final public BranchStatement BranchStatement() throws ParseException {
        NodeToken n0;
        Token n1;
        NodeToken n2;
        Token n3;
        Expression n4;
        NodeToken n5;
        Token n6;
        NodeToken n7;
        Token n8;
        NodeList n9 = new NodeList();
        Statement n10;
        NodeToken n11;
        Token n12;
        NodeListOptional n13 = new NodeListOptional();
        ElseIfStatement n14;
        NodeOptional n15 = new NodeOptional();
        ElseStatement n16;
        n1 = jj_consume_token(IF);
        n0 = JTBToolkit.makeNodeToken(n1);
        n3 = jj_consume_token(LPAREN);
        n2 = JTBToolkit.makeNodeToken(n3);
        n4 = Expression();
        n6 = jj_consume_token(RPAREN);
        n5 = JTBToolkit.makeNodeToken(n6);
        n8 = jj_consume_token(LBRACE);
        n7 = JTBToolkit.makeNodeToken(n8);
        label_12:
        while (true) {
            n10 = Statement();
            n9.addNode(n10);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case DRAIN:
                case HEAT:
                case REPEAT:
                case IF:
                case REAL:
                case NAT:
                case MAT:
                case IDENTIFIER: {
                    break;
                }
                default:
                    jj_la1[21] = jj_gen;
                    break label_12;
            }
        }
        n9.nodes.trimToSize();
        n12 = jj_consume_token(RBRACE);
        n11 = JTBToolkit.makeNodeToken(n12);
        label_13:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case ELSE_IF: {
                    break;
                }
                default:
                    jj_la1[22] = jj_gen;
                    break label_13;
            }
            n14 = ElseIfStatement();
            n13.addNode(n14);
        }
        n13.nodes.trimToSize();
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case ELSE: {
                n16 = ElseStatement();
                n15.addNode(n16);
                break;
            }
            default:
                jj_la1[23] = jj_gen;
        }
        {
            if ("" != null) return new BranchStatement(n0, n2, n4, n5, n7, n9, n11, n13, n15);
        }
        throw new Error("Missing return statement in function");
    }

    final public ElseIfStatement ElseIfStatement() throws ParseException {
        NodeToken n0;
        Token n1;
        NodeToken n2;
        Token n3;
        Expression n4;
        NodeToken n5;
        Token n6;
        NodeToken n7;
        Token n8;
        NodeList n9 = new NodeList();
        Statement n10;
        NodeToken n11;
        Token n12;
        n1 = jj_consume_token(ELSE_IF);
        n0 = JTBToolkit.makeNodeToken(n1);
        n3 = jj_consume_token(LPAREN);
        n2 = JTBToolkit.makeNodeToken(n3);
        n4 = Expression();
        n6 = jj_consume_token(RPAREN);
        n5 = JTBToolkit.makeNodeToken(n6);
        n8 = jj_consume_token(LBRACE);
        n7 = JTBToolkit.makeNodeToken(n8);
        label_14:
        while (true) {
            n10 = Statement();
            n9.addNode(n10);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case DRAIN:
                case HEAT:
                case REPEAT:
                case IF:
                case REAL:
                case NAT:
                case MAT:
                case IDENTIFIER: {
                    break;
                }
                default:
                    jj_la1[24] = jj_gen;
                    break label_14;
            }
        }
        n9.nodes.trimToSize();
        n12 = jj_consume_token(RBRACE);
        n11 = JTBToolkit.makeNodeToken(n12);
        {
            if ("" != null) return new ElseIfStatement(n0, n2, n4, n5, n7, n9, n11);
        }
        throw new Error("Missing return statement in function");
    }

    final public ElseStatement ElseStatement() throws ParseException {
        NodeToken n0;
        Token n1;
        NodeToken n2;
        Token n3;
        NodeList n4 = new NodeList();
        Statement n5;
        NodeToken n6;
        Token n7;
        n1 = jj_consume_token(ELSE);
        n0 = JTBToolkit.makeNodeToken(n1);
        n3 = jj_consume_token(LBRACE);
        n2 = JTBToolkit.makeNodeToken(n3);
        label_15:
        while (true) {
            n5 = Statement();
            n4.addNode(n5);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case DRAIN:
                case HEAT:
                case REPEAT:
                case IF:
                case REAL:
                case NAT:
                case MAT:
                case IDENTIFIER: {
                    break;
                }
                default:
                    jj_la1[25] = jj_gen;
                    break label_15;
            }
        }
        n4.nodes.trimToSize();
        n7 = jj_consume_token(RBRACE);
        n6 = JTBToolkit.makeNodeToken(n7);
        {
            if ("" != null) return new ElseStatement(n0, n2, n4, n6);
        }
        throw new Error("Missing return statement in function");
    }

    final public Expression Expression() throws ParseException {
        NodeChoice n0;
        AndExpression n1;
        LessThanExpression n2;
        LessThanEqualExpression n3;
        GreaterThanExpression n4;
        GreaterThanEqualExpression n5;
        NotEqualExpression n6;
        EqualityExpression n7;
        OrExpression n8;
        PlusExpression n9;
        MinusExpression n10;
        TimesExpression n11;
        FunctionInvoke n12;
        PrimaryExpression n13;
        InstructionAssignment n14;
        if (jj_2_3(2147483647)) {
            n1 = AndExpression();
            n0 = new NodeChoice(n1, 0);
        } else if (jj_2_4(2147483647)) {
            n2 = LessThanExpression();
            n0 = new NodeChoice(n2, 1);
        } else if (jj_2_5(2147483647)) {
            n3 = LessThanEqualExpression();
            n0 = new NodeChoice(n3, 2);
        } else if (jj_2_6(2147483647)) {
            n4 = GreaterThanExpression();
            n0 = new NodeChoice(n4, 3);
        } else if (jj_2_7(2147483647)) {
            n5 = GreaterThanEqualExpression();
            n0 = new NodeChoice(n5, 4);
        } else if (jj_2_8(2147483647)) {
            n6 = NotEqualExpression();
            n0 = new NodeChoice(n6, 5);
        } else if (jj_2_9(2147483647)) {
            n7 = EqualityExpression();
            n0 = new NodeChoice(n7, 6);
        } else if (jj_2_10(2147483647)) {
            n8 = OrExpression();
            n0 = new NodeChoice(n8, 7);
        } else if (jj_2_11(2147483647)) {
            n9 = PlusExpression();
            n0 = new NodeChoice(n9, 8);
        } else if (jj_2_12(2147483647)) {
            n10 = MinusExpression();
            n0 = new NodeChoice(n10, 9);
        } else if (jj_2_13(2147483647)) {
            n11 = TimesExpression();
            n0 = new NodeChoice(n11, 10);
        } else if (jj_2_14(2147483647)) {
            n12 = FunctionInvoke();
            n0 = new NodeChoice(n12, 11);
        } else {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case LPAREN:
                case TRUE:
                case FALSE:
                case INTEGER_LITERAL:
                case IDENTIFIER: {
                    n13 = PrimaryExpression();
                    n0 = new NodeChoice(n13, 12);
                    break;
                }
                case MIX:
                case SPLIT:
                case DETECT: {
                    n14 = InstructionAssignment();
                    n0 = new NodeChoice(n14, 13);
                    break;
                }
                default:
                    jj_la1[26] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if ("" != null) return new Expression(n0);
        }
        throw new Error("Missing return statement in function");
    }

    final public FunctionInvoke FunctionInvoke() throws ParseException {
        Identifier n0;
        NodeToken n1;
        Token n2;
        NodeOptional n3 = new NodeOptional();
        ExpressionList n4;
        NodeToken n5;
        Token n6;
        n0 = Identifier();
        n2 = jj_consume_token(LPAREN);
        n1 = JTBToolkit.makeNodeToken(n2);
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case MIX:
            case SPLIT:
            case DETECT:
            case LPAREN:
            case TRUE:
            case FALSE:
            case INTEGER_LITERAL:
            case IDENTIFIER: {
                n4 = ExpressionList();
                n3.addNode(n4);
                break;
            }
            default:
                jj_la1[27] = jj_gen;
        }
        n6 = jj_consume_token(RPAREN);
        n5 = JTBToolkit.makeNodeToken(n6);
        {
            if ("" != null) return new FunctionInvoke(n0, n1, n3, n5);
        }
        throw new Error("Missing return statement in function");
    }

    final public ExpressionList ExpressionList() throws ParseException {
        Expression n0;
        NodeListOptional n1 = new NodeListOptional();
        ExpressionRest n2;
        n0 = Expression();
        label_16:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case COMMA: {
                    break;
                }
                default:
                    jj_la1[28] = jj_gen;
                    break label_16;
            }
            n2 = ExpressionRest();
            n1.addNode(n2);
        }
        n1.nodes.trimToSize();
        {
            if ("" != null) return new ExpressionList(n0, n1);
        }
        throw new Error("Missing return statement in function");
    }

    final public ExpressionRest ExpressionRest() throws ParseException {
        NodeToken n0;
        Token n1;
        Expression n2;
        n1 = jj_consume_token(COMMA);
        n0 = JTBToolkit.makeNodeToken(n1);
        n2 = Expression();
        {
            if ("" != null) return new ExpressionRest(n0, n2);
        }
        throw new Error("Missing return statement in function");
    }

    final public InstructionAssignment InstructionAssignment() throws ParseException {
        NodeChoice n0;
        MixStatement n1;
        DetectStatement n2;
        SplitStatement n3;
        FunctionInvoke n4;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case MIX: {
                n1 = MixStatement();
                n0 = new NodeChoice(n1, 0);
                break;
            }
            case DETECT: {
                n2 = DetectStatement();
                n0 = new NodeChoice(n2, 1);
                break;
            }
            case SPLIT: {
                n3 = SplitStatement();
                n0 = new NodeChoice(n3, 2);
                break;
            }
            case IDENTIFIER: {
                n4 = FunctionInvoke();
                n0 = new NodeChoice(n4, 3);
                break;
            }
            default:
                jj_la1[29] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {
            if ("" != null) return new InstructionAssignment(n0);
        }
        throw new Error("Missing return statement in function");
    }

    final public PrimaryExpression PrimaryExpression() throws ParseException {
        NodeChoice n0;
        Identifier n1;
        TrueLiteral n2;
        FalseLiteral n3;
        ParenthesisExpression n4;
        IntegerLiteral n5;
        if (jj_2_15(2)) {
            n1 = Identifier();
            n0 = new NodeChoice(n1, 0);
        } else {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case TRUE: {
                    n2 = TrueLiteral();
                    n0 = new NodeChoice(n2, 1);
                    break;
                }
                case FALSE: {
                    n3 = FalseLiteral();
                    n0 = new NodeChoice(n3, 2);
                    break;
                }
                case LPAREN: {
                    n4 = ParenthesisExpression();
                    n0 = new NodeChoice(n4, 3);
                    break;
                }
                case INTEGER_LITERAL: {
                    n5 = IntegerLiteral();
                    n0 = new NodeChoice(n5, 4);
                    break;
                }
                default:
                    jj_la1[30] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if ("" != null) return new PrimaryExpression(n0);
        }
        throw new Error("Missing return statement in function");
    }

    final public IntegerLiteral IntegerLiteral() throws ParseException {
        NodeToken n0;
        Token n1;
        n1 = jj_consume_token(INTEGER_LITERAL);
        n0 = JTBToolkit.makeNodeToken(n1);
        {
            if ("" != null) return new IntegerLiteral(n0);
        }
        throw new Error("Missing return statement in function");
    }

    final public NatLiteral NatLiteral() throws ParseException {
        NodeToken n0;
        Token n1;
        n1 = jj_consume_token(NAT);
        n0 = JTBToolkit.makeNodeToken(n1);
        {
            if ("" != null) return new NatLiteral(n0);
        }
        throw new Error("Missing return statement in function");
    }

    final public MatLiteral MatLiteral() throws ParseException {
        NodeToken n0;
        Token n1;
        n1 = jj_consume_token(MAT);
        n0 = JTBToolkit.makeNodeToken(n1);
        {
            if ("" != null) return new MatLiteral(n0);
        }
        throw new Error("Missing return statement in function");
    }

    final public RealLiteral RealLiteral() throws ParseException {
        NodeToken n0;
        Token n1;
        n1 = jj_consume_token(REAL);
        n0 = JTBToolkit.makeNodeToken(n1);
        {
            if ("" != null) return new RealLiteral(n0);
        }
        throw new Error("Missing return statement in function");
    }

    final public TrueLiteral TrueLiteral() throws ParseException {
        NodeToken n0;
        Token n1;
        n1 = jj_consume_token(TRUE);
        n0 = JTBToolkit.makeNodeToken(n1);
        {
            if ("" != null) return new TrueLiteral(n0);
        }
        throw new Error("Missing return statement in function");
    }

    final public FalseLiteral FalseLiteral() throws ParseException {
        NodeToken n0;
        Token n1;
        n1 = jj_consume_token(FALSE);
        n0 = JTBToolkit.makeNodeToken(n1);
        {
            if ("" != null) return new FalseLiteral(n0);
        }
        throw new Error("Missing return statement in function");
    }

    final public Identifier Identifier() throws ParseException {
        NodeToken n0;
        Token n1;
        n1 = jj_consume_token(IDENTIFIER);
        n0 = JTBToolkit.makeNodeToken(n1);
        {
            if ("" != null) return new Identifier(n0);
        }
        throw new Error("Missing return statement in function");
    }

    final public AndExpression AndExpression() throws ParseException {
        PrimaryExpression n0;
        NodeToken n1;
        Token n2;
        PrimaryExpression n3;
        n0 = PrimaryExpression();
        n2 = jj_consume_token(AND);
        n1 = JTBToolkit.makeNodeToken(n2);
        n3 = PrimaryExpression();
        {
            if ("" != null) return new AndExpression(n0, n1, n3);
        }
        throw new Error("Missing return statement in function");
    }

    final public LessThanExpression LessThanExpression() throws ParseException {
        PrimaryExpression n0;
        NodeToken n1;
        Token n2;
        PrimaryExpression n3;
        n0 = PrimaryExpression();
        n2 = jj_consume_token(LESSTHAN);
        n1 = JTBToolkit.makeNodeToken(n2);
        n3 = PrimaryExpression();
        {
            if ("" != null) return new LessThanExpression(n0, n1, n3);
        }
        throw new Error("Missing return statement in function");
    }

    final public LessThanEqualExpression LessThanEqualExpression() throws ParseException {
        PrimaryExpression n0;
        NodeToken n1;
        Token n2;
        PrimaryExpression n3;
        n0 = PrimaryExpression();
        n2 = jj_consume_token(LESSTHANEQUAL);
        n1 = JTBToolkit.makeNodeToken(n2);
        n3 = PrimaryExpression();
        {
            if ("" != null) return new LessThanEqualExpression(n0, n1, n3);
        }
        throw new Error("Missing return statement in function");
    }

    final public GreaterThanExpression GreaterThanExpression() throws ParseException {
        PrimaryExpression n0;
        NodeToken n1;
        Token n2;
        PrimaryExpression n3;
        n0 = PrimaryExpression();
        n2 = jj_consume_token(GREATERTHAN);
        n1 = JTBToolkit.makeNodeToken(n2);
        n3 = PrimaryExpression();
        {
            if ("" != null) return new GreaterThanExpression(n0, n1, n3);
        }
        throw new Error("Missing return statement in function");
    }

    final public GreaterThanEqualExpression GreaterThanEqualExpression() throws ParseException {
        PrimaryExpression n0;
        NodeToken n1;
        Token n2;
        PrimaryExpression n3;
        n0 = PrimaryExpression();
        n2 = jj_consume_token(GREATERTHANEQUAL);
        n1 = JTBToolkit.makeNodeToken(n2);
        n3 = PrimaryExpression();
        {
            if ("" != null) return new GreaterThanEqualExpression(n0, n1, n3);
        }
        throw new Error("Missing return statement in function");
    }

    final public NotEqualExpression NotEqualExpression() throws ParseException {
        PrimaryExpression n0;
        NodeToken n1;
        Token n2;
        PrimaryExpression n3;
        n0 = PrimaryExpression();
        n2 = jj_consume_token(NOTEQUAL);
        n1 = JTBToolkit.makeNodeToken(n2);
        n3 = PrimaryExpression();
        {
            if ("" != null) return new NotEqualExpression(n0, n1, n3);
        }
        throw new Error("Missing return statement in function");
    }

    final public EqualityExpression EqualityExpression() throws ParseException {
        PrimaryExpression n0;
        NodeToken n1;
        Token n2;
        PrimaryExpression n3;
        n0 = PrimaryExpression();
        n2 = jj_consume_token(OR);
        n1 = JTBToolkit.makeNodeToken(n2);
        n3 = PrimaryExpression();
        {
            if ("" != null) return new EqualityExpression(n0, n1, n3);
        }
        throw new Error("Missing return statement in function");
    }

    final public OrExpression OrExpression() throws ParseException {
        PrimaryExpression n0;
        NodeToken n1;
        Token n2;
        PrimaryExpression n3;
        n0 = PrimaryExpression();
        n2 = jj_consume_token(LESSTHAN);
        n1 = JTBToolkit.makeNodeToken(n2);
        n3 = PrimaryExpression();
        {
            if ("" != null) return new OrExpression(n0, n1, n3);
        }
        throw new Error("Missing return statement in function");
    }

    final public PlusExpression PlusExpression() throws ParseException {
        PrimaryExpression n0;
        NodeToken n1;
        Token n2;
        PrimaryExpression n3;
        n0 = PrimaryExpression();
        n2 = jj_consume_token(ADD);
        n1 = JTBToolkit.makeNodeToken(n2);
        n3 = PrimaryExpression();
        {
            if ("" != null) return new PlusExpression(n0, n1, n3);
        }
        throw new Error("Missing return statement in function");
    }

    final public MinusExpression MinusExpression() throws ParseException {
        PrimaryExpression n0;
        NodeToken n1;
        Token n2;
        PrimaryExpression n3;
        n0 = PrimaryExpression();
        n2 = jj_consume_token(MINUS);
        n1 = JTBToolkit.makeNodeToken(n2);
        n3 = PrimaryExpression();
        {
            if ("" != null) return new MinusExpression(n0, n1, n3);
        }
        throw new Error("Missing return statement in function");
    }

    final public TimesExpression TimesExpression() throws ParseException {
        PrimaryExpression n0;
        NodeToken n1;
        Token n2;
        PrimaryExpression n3;
        n0 = PrimaryExpression();
        n2 = jj_consume_token(MULTIPLY);
        n1 = JTBToolkit.makeNodeToken(n2);
        n3 = PrimaryExpression();
        {
            if ("" != null) return new TimesExpression(n0, n1, n3);
        }
        throw new Error("Missing return statement in function");
    }

    final public NotExpression NotExpression() throws ParseException {
        NodeToken n0;
        Token n1;
        Expression n2;
        n1 = jj_consume_token(BANG);
        n0 = JTBToolkit.makeNodeToken(n1);
        n2 = Expression();
        {
            if ("" != null) return new NotExpression(n0, n2);
        }
        throw new Error("Missing return statement in function");
    }

    final public ParenthesisExpression ParenthesisExpression() throws ParseException {
        NodeToken n0;
        Token n1;
        Expression n2;
        NodeToken n3;
        Token n4;
        n1 = jj_consume_token(LPAREN);
        n0 = JTBToolkit.makeNodeToken(n1);
        n2 = Expression();
        n4 = jj_consume_token(RPAREN);
        n3 = JTBToolkit.makeNodeToken(n4);
        {
            if ("" != null) return new ParenthesisExpression(n0, n2, n3);
        }
        throw new Error("Missing return statement in function");
    }

    private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_1();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(0, xla);
        }
    }

    private boolean jj_2_2(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_2();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(1, xla);
        }
    }

    private boolean jj_2_3(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_3();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(2, xla);
        }
    }

    private boolean jj_2_4(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_4();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(3, xla);
        }
    }

    private boolean jj_2_5(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_5();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(4, xla);
        }
    }

    private boolean jj_2_6(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_6();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(5, xla);
        }
    }

    private boolean jj_2_7(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_7();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(6, xla);
        }
    }

    private boolean jj_2_8(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_8();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(7, xla);
        }
    }

    private boolean jj_2_9(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_9();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(8, xla);
        }
    }

    private boolean jj_2_10(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_10();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(9, xla);
        }
    }

    private boolean jj_2_11(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_11();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(10, xla);
        }
    }

    private boolean jj_2_12(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_12();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(11, xla);
        }
    }

    private boolean jj_2_13(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_13();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(12, xla);
        }
    }

    private boolean jj_2_14(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_14();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(13, xla);
        }
    }

    private boolean jj_2_15(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_15();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(14, xla);
        }
    }

    private boolean jj_3R_27() {
        if (jj_3R_46()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_47()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_26() {
        return jj_3R_45();
    }

    private boolean jj_3R_53() {
        if (jj_3R_19()) return true;
        if (jj_scan_token(NOTEQUAL)) return true;
        return jj_3R_19();
    }

    private boolean jj_3R_25() {
        return jj_3R_44();
    }

    private boolean jj_3R_24() {
        return jj_3R_43();
    }

    private boolean jj_3R_23() {
        return jj_3R_42();
    }

    private boolean jj_3_15() {
        return jj_3R_20();
    }

    private boolean jj_3R_19() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_15()) {
            jj_scanpos = xsp;
            if (jj_3R_23()) {
                jj_scanpos = xsp;
                if (jj_3R_24()) {
                    jj_scanpos = xsp;
                    if (jj_3R_25()) {
                        jj_scanpos = xsp;
                        return jj_3R_26();
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_52() {
        if (jj_3R_19()) return true;
        if (jj_scan_token(GREATERTHANEQUAL)) return true;
        return jj_3R_19();
    }

    private boolean jj_3R_68() {
        return jj_3R_59();
    }

    private boolean jj_3R_51() {
        if (jj_3R_19()) return true;
        if (jj_scan_token(GREATERTHAN)) return true;
        return jj_3R_19();
    }

    private boolean jj_3R_67() {
        return jj_3R_74();
    }

    private boolean jj_3R_66() {
        return jj_3R_73();
    }

    private boolean jj_3R_74() {
        if (jj_scan_token(SPLIT)) return true;
        if (jj_3R_19()) return true;
        if (jj_scan_token(INTO)) return true;
        return jj_3R_45();
    }

    private boolean jj_3R_65() {
        return jj_3R_72();
    }

    private boolean jj_3R_60() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_65()) {
            jj_scanpos = xsp;
            if (jj_3R_66()) {
                jj_scanpos = xsp;
                if (jj_3R_67()) {
                    jj_scanpos = xsp;
                    return jj_3R_68();
                }
            }
        }
        return false;
    }

    private boolean jj_3R_50() {
        if (jj_3R_19()) return true;
        if (jj_scan_token(LESSTHANEQUAL)) return true;
        return jj_3R_19();
    }

    private boolean jj_3R_76() {
        if (jj_scan_token(FOR)) return true;
        return jj_3R_45();
    }

    private boolean jj_3R_78() {
        if (jj_scan_token(COMMA)) return true;
        return jj_3R_22();
    }

    private boolean jj_3R_72() {
        if (jj_scan_token(MIX)) return true;
        if (jj_3R_19()) return true;
        if (jj_scan_token(WITH)) return true;
        if (jj_3R_19()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_76()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_49() {
        if (jj_3R_19()) return true;
        if (jj_scan_token(LESSTHAN)) return true;
        return jj_3R_19();
    }

    private boolean jj_3R_44() {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_22()) return true;
        return jj_scan_token(RPAREN);
    }

    private boolean jj_3R_75() {
        return jj_3R_78();
    }

    private boolean jj_3R_21() {
        return jj_3R_27();
    }

    private boolean jj_3R_71() {
        if (jj_3R_22()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_75()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_17() {
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_21()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_3R_20()) return true;
        if (jj_scan_token(ASSIGN)) return true;
        return jj_3R_22();
    }

    private boolean jj_3R_48() {
        if (jj_3R_19()) return true;
        if (jj_scan_token(AND)) return true;
        return jj_3R_19();
    }

    private boolean jj_3R_64() {
        return jj_3R_71();
    }

    private boolean jj_3R_20() {
        return jj_scan_token(IDENTIFIER);
    }

    private boolean jj_3R_59() {
        if (jj_3R_20()) return true;
        if (jj_scan_token(LPAREN)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_64()) jj_scanpos = xsp;
        return jj_scan_token(RPAREN);
    }

    private boolean jj_3_1() {
        return jj_3R_17();
    }

    private boolean jj_3R_58() {
        if (jj_3R_19()) return true;
        if (jj_scan_token(MULTIPLY)) return true;
        return jj_3R_19();
    }

    private boolean jj_3R_43() {
        return jj_scan_token(FALSE);
    }

    private boolean jj_3_14() {
        if (jj_3R_19()) return true;
        return jj_scan_token(LPAREN);
    }

    private boolean jj_3R_41() {
        return jj_3R_60();
    }

    private boolean jj_3_13() {
        if (jj_3R_19()) return true;
        return jj_scan_token(MULTIPLY);
    }

    private boolean jj_3R_40() {
        return jj_3R_19();
    }

    private boolean jj_3_12() {
        if (jj_3R_19()) return true;
        return jj_scan_token(MINUS);
    }

    private boolean jj_3R_57() {
        if (jj_3R_19()) return true;
        if (jj_scan_token(MINUS)) return true;
        return jj_3R_19();
    }

    private boolean jj_3R_39() {
        return jj_3R_59();
    }

    private boolean jj_3R_42() {
        return jj_scan_token(TRUE);
    }

    private boolean jj_3_11() {
        if (jj_3R_19()) return true;
        return jj_scan_token(ADD);
    }

    private boolean jj_3R_38() {
        return jj_3R_58();
    }

    private boolean jj_3_10() {
        if (jj_3R_19()) return true;
        return jj_scan_token(OR);
    }

    private boolean jj_3R_37() {
        return jj_3R_57();
    }

    private boolean jj_3_9() {
        if (jj_3R_19()) return true;
        return jj_scan_token(EQUALITY);
    }

    private boolean jj_3R_36() {
        return jj_3R_56();
    }

    private boolean jj_3_8() {
        if (jj_3R_19()) return true;
        return jj_scan_token(NOTEQUAL);
    }

    private boolean jj_3R_70() {
        return jj_scan_token(REAL);
    }

    private boolean jj_3R_56() {
        if (jj_3R_19()) return true;
        if (jj_scan_token(ADD)) return true;
        return jj_3R_19();
    }

    private boolean jj_3R_35() {
        return jj_3R_55();
    }

    private boolean jj_3R_63() {
        if (jj_scan_token(COMMA)) return true;
        return jj_3R_46();
    }

    private boolean jj_3_7() {
        if (jj_3R_19()) return true;
        return jj_scan_token(GREATERTHANEQUAL);
    }

    private boolean jj_3R_34() {
        return jj_3R_54();
    }

    private boolean jj_3_6() {
        if (jj_3R_19()) return true;
        return jj_scan_token(GREATERTHAN);
    }

    private boolean jj_3R_77() {
        if (jj_scan_token(FOR)) return true;
        return jj_3R_45();
    }

    private boolean jj_3R_33() {
        return jj_3R_53();
    }

    private boolean jj_3_5() {
        if (jj_3R_19()) return true;
        return jj_scan_token(LESSTHANEQUAL);
    }

    private boolean jj_3R_18() {
        return jj_scan_token(MAT);
    }

    private boolean jj_3R_32() {
        return jj_3R_52();
    }

    private boolean jj_3_4() {
        if (jj_3R_19()) return true;
        return jj_scan_token(LESSTHAN);
    }

    private boolean jj_3R_62() {
        return jj_3R_70();
    }

    private boolean jj_3R_73() {
        if (jj_scan_token(DETECT)) return true;
        if (jj_3R_19()) return true;
        if (jj_scan_token(ON)) return true;
        if (jj_3R_19()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_77()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_31() {
        return jj_3R_51();
    }

    private boolean jj_3R_55() {
        if (jj_3R_19()) return true;
        if (jj_scan_token(LESSTHAN)) return true;
        return jj_3R_19();
    }

    private boolean jj_3R_61() {
        return jj_3R_69();
    }

    private boolean jj_3_3() {
        if (jj_3R_19()) return true;
        return jj_scan_token(AND);
    }

    private boolean jj_3R_30() {
        return jj_3R_50();
    }

    private boolean jj_3_2() {
        return jj_3R_18();
    }

    private boolean jj_3R_29() {
        return jj_3R_49();
    }

    private boolean jj_3R_69() {
        return jj_scan_token(NAT);
    }

    private boolean jj_3R_46() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_2()) {
            jj_scanpos = xsp;
            if (jj_3R_61()) {
                jj_scanpos = xsp;
                return jj_3R_62();
            }
        }
        return false;
    }

    private boolean jj_3R_28() {
        return jj_3R_48();
    }

    private boolean jj_3R_22() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_28()) {
            jj_scanpos = xsp;
            if (jj_3R_29()) {
                jj_scanpos = xsp;
                if (jj_3R_30()) {
                    jj_scanpos = xsp;
                    if (jj_3R_31()) {
                        jj_scanpos = xsp;
                        if (jj_3R_32()) {
                            jj_scanpos = xsp;
                            if (jj_3R_33()) {
                                jj_scanpos = xsp;
                                if (jj_3R_34()) {
                                    jj_scanpos = xsp;
                                    if (jj_3R_35()) {
                                        jj_scanpos = xsp;
                                        if (jj_3R_36()) {
                                            jj_scanpos = xsp;
                                            if (jj_3R_37()) {
                                                jj_scanpos = xsp;
                                                if (jj_3R_38()) {
                                                    jj_scanpos = xsp;
                                                    if (jj_3R_39()) {
                                                        jj_scanpos = xsp;
                                                        if (jj_3R_40()) {
                                                            jj_scanpos = xsp;
                                                            return jj_3R_41();
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_54() {
        if (jj_3R_19()) return true;
        if (jj_scan_token(OR)) return true;
        return jj_3R_19();
    }

    private boolean jj_3R_45() {
        return jj_scan_token(INTEGER_LITERAL);
    }

    private boolean jj_3R_47() {
        return jj_3R_63();
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 31; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 31; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Reinitialise.
     */
    public void ReInit(BSParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 31; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen) c.first = null;
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null) jj_add_error_token(kind, i);
        }
        if (jj_scanpos.kind != kind) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
        return false;
    }

    /**
     * Get the next Token.
     */
    final public Token getNextToken() {
        if (token.next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /**
     * Get the specific Token.
     */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) t = t.next;
            else t = t.next = token_source.getNextToken();
        }
        return t;
    }

    private int jj_ntk_f() {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) return;
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            jj_entries_loop:
            for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext(); ) {
                int[] oldentry = (int[]) (it.next());
                if (oldentry.length == jj_expentry.length) {
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            continue jj_entries_loop;
                        }
                    }
                    jj_expentries.add(jj_expentry);
                    break jj_entries_loop;
                }
            }
            if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
        }
    }

    /**
     * Generate ParseException.
     */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[59];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 31; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 59; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /**
     * Enable tracing.
     */
    final public void enable_tracing() {
    }

    /**
     * Disable tracing.
     */
    final public void disable_tracing() {
    }

    private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 15; i++) {
            try {
                JJCalls p = jj_2_rtns[i];
                do {
                    if (p.gen > jj_gen) {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch (i) {
                            case 0:
                                jj_3_1();
                                break;
                            case 1:
                                jj_3_2();
                                break;
                            case 2:
                                jj_3_3();
                                break;
                            case 3:
                                jj_3_4();
                                break;
                            case 4:
                                jj_3_5();
                                break;
                            case 5:
                                jj_3_6();
                                break;
                            case 6:
                                jj_3_7();
                                break;
                            case 7:
                                jj_3_8();
                                break;
                            case 8:
                                jj_3_9();
                                break;
                            case 9:
                                jj_3_10();
                                break;
                            case 10:
                                jj_3_11();
                                break;
                            case 11:
                                jj_3_12();
                                break;
                            case 12:
                                jj_3_13();
                                break;
                            case 13:
                                jj_3_14();
                                break;
                            case 14:
                                jj_3_15();
                                break;
                        }
                    }
                    p = p.next;
                } while (p != null);
            } catch (LookaheadSuccess ls) {
            }
        }
        jj_rescan = false;
    }

    private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    @SuppressWarnings("serial")
    static private final class LookaheadSuccess extends java.lang.Error {
    }

    static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }
}
