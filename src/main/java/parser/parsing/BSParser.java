/* BSParser.java */
/* Generated By:JavaCC: Do not edit this line. BSParser.java */
package parser.parsing;

import parser.ast.AndExpression;
import parser.ast.AssignmentStatement;
import parser.ast.BSProgram;
import parser.ast.BranchStatement;
import parser.ast.DetectStatement;
import parser.ast.DrainStatement;
import parser.ast.EqualityExpression;
import parser.ast.Expression;
import parser.ast.FalseLiteral;
import parser.ast.FormalParameter;
import parser.ast.FormalParameterList;
import parser.ast.FormalParameterRest;
import parser.ast.Function;
import parser.ast.GreaterThanEqualExpression;
import parser.ast.GreaterThanExpression;
import parser.ast.HeatStatement;
import parser.ast.Identifier;
import parser.ast.Instruction;
import parser.ast.IntegerLiteral;
import parser.ast.LessThanEqualExpression;
import parser.ast.LessThanExpression;
import parser.ast.Manifest;
import parser.ast.MatLiteral;
import parser.ast.MinusExpression;
import parser.ast.MixStatement;
import parser.ast.Module;
import parser.ast.NatLiteral;
import parser.ast.NodeChoice;
import parser.ast.NodeList;
import parser.ast.NodeListOptional;
import parser.ast.NodeOptional;
import parser.ast.NodeSequence;
import parser.ast.NodeToken;
import parser.ast.NotEqualExpression;
import parser.ast.NotExpression;
import parser.ast.OrExpression;
import parser.ast.ParenthesisExpression;
import parser.ast.PlusExpression;
import parser.ast.PrimaryExpression;
import parser.ast.RealLiteral;
import parser.ast.RepeatStatement;
import parser.ast.SplitStatement;
import parser.ast.Statement;
import parser.ast.Stationary;
import parser.ast.TimesExpression;
import parser.ast.TrueLiteral;
import parser.ast.Type;
import parser.ast.TypingList;
import parser.ast.TypingRest;
import parser.ast.WhileStatement;


public class BSParser implements BSParserConstants {

    static private int[] jj_la1_0;
    static private int[] jj_la1_1;

    static {
        jj_la1_init_0();
        jj_la1_init_1();
    }

    final private int[] jj_la1 = new int[19];
    final private JJCalls[] jj_2_rtns = new JJCalls[15];
    final private LookaheadSuccess jj_ls = new LookaheadSuccess();
    /**
     * Generated Token Manager.
     */
    public BSParserTokenManager token_source;
    /**
     * Current token.
     */
    public Token token;
    /**
     * Next token.
     */
    public Token jj_nt;
    JavaCharStream jj_input_stream;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    private int jj_gen;
    private boolean jj_rescan = false;
    private int jj_gc = 0;
    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;
    private int trace_indent = 0;
    private boolean trace_enabled = true;

    /**
     * Constructor with InputStream.
     */
    public BSParser(java.io.InputStream stream) {
        this(stream, null);
    }

    /**
     * Constructor with InputStream and supplied encoding
     */
    public BSParser(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new JavaCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new BSParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 19; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Constructor.
     */
    public BSParser(java.io.Reader stream) {
        jj_input_stream = new JavaCharStream(stream, 1, 1);
        token_source = new BSParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 19; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Constructor with generated Token Manager.
     */
    public BSParser(BSParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 19; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{0x20000, 0x7000000, 0x7000000, 0x40000, 0x8000000, 0x70037c0, 0x7003780, 0x7000000, 0x0, 0x0, 0x0, 0x440, 0x200, 0x1400, 0x7000000, 0x7000000, 0x1c000, 0x20000000, 0x20000000,};
    }

    private static void jj_la1_init_1() {
        jj_la1_1 = new int[]{0x0, 0x0, 0x0, 0x0, 0x0, 0x1000000, 0x1000000, 0x0, 0x200000, 0x100000, 0x100000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18c0000, 0x18c0000,};
    }

    final public BSProgram BSProgram() throws ParseException {
        trace_call("BSProgram");
        try {
            Module n0;
            Stationary n1;
            Manifest n2;
            NodeToken n3;
            Token n4;
            Instruction n5;
            NodeToken n6;
            Token n7;
            n0 = Module();
            n1 = Stationary();
            n2 = Manifest();
            n4 = jj_consume_token(INSTRUCTIONS);
            n3 = JTBToolkit.makeNodeToken(n4);
            n5 = Instruction();
            n7 = jj_consume_token(0);
            n7.beginColumn++;
            n7.endColumn++;
            n6 = JTBToolkit.makeNodeToken(n7);
            {
                if ("" != null) return new BSProgram(n0, n1, n2, n3, n5, n6);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("BSProgram");
        }
    }

    final public Stationary Stationary() throws ParseException {
        trace_call("Stationary");
        try {
            NodeListOptional n0 = new NodeListOptional();
            NodeSequence n1;
            NodeToken n2;
            Token n3;
            NodeListOptional n4;
            TypingList n5;
            Identifier n6;
            label_1:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case STATIONARY: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[0] = jj_gen;
                        break label_1;
                }
                n4 = new NodeListOptional();
                n1 = new NodeSequence(3);
                n3 = jj_consume_token(STATIONARY);
                n2 = JTBToolkit.makeNodeToken(n3);
                n1.addNode(n2);
                label_2:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                        case REAL:
                        case NAT:
                        case MAT: {
                            ;
                            break;
                        }
                        default:
                            jj_la1[1] = jj_gen;
                            break label_2;
                    }
                    n5 = TypingList();
                    n4.addNode(n5);
                }
                n4.nodes.trimToSize();
                n1.addNode(n4);
                n6 = Identifier();
                n1.addNode(n6);
                n0.addNode(n1);
            }
            n0.nodes.trimToSize();
            {
                if ("" != null) return new Stationary(n0);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("Stationary");
        }
    }

    final public Manifest Manifest() throws ParseException {
        trace_call("Manifest");
        try {
            NodeList n0 = new NodeList();
            NodeSequence n1;
            NodeToken n2;
            Token n3;
            NodeListOptional n4;
            TypingList n5;
            Identifier n6;
            label_3:
            while (true) {
                n4 = new NodeListOptional();
                n1 = new NodeSequence(3);
                n3 = jj_consume_token(MANIFEST);
                n2 = JTBToolkit.makeNodeToken(n3);
                n1.addNode(n2);
                label_4:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                        case REAL:
                        case NAT:
                        case MAT: {
                            ;
                            break;
                        }
                        default:
                            jj_la1[2] = jj_gen;
                            break label_4;
                    }
                    n5 = TypingList();
                    n4.addNode(n5);
                }
                n4.nodes.trimToSize();
                n1.addNode(n4);
                n6 = Identifier();
                n1.addNode(n6);
                n0.addNode(n1);
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case MANIFEST: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[3] = jj_gen;
                        break label_3;
                }
            }
            n0.nodes.trimToSize();
            {
                if ("" != null) return new Manifest(n0);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("Manifest");
        }
    }

    final public Module Module() throws ParseException {
        trace_call("Module");
        try {
            NodeListOptional n0 = new NodeListOptional();
            NodeSequence n1;
            NodeToken n2;
            Token n3;
            Identifier n4;
            label_5:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case MODULE: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[4] = jj_gen;
                        break label_5;
                }
                n1 = new NodeSequence(2);
                n3 = jj_consume_token(MODULE);
                n2 = JTBToolkit.makeNodeToken(n3);
                n1.addNode(n2);
                n4 = Identifier();
                n1.addNode(n4);
                n0.addNode(n1);
            }
            n0.nodes.trimToSize();
            {
                if ("" != null) return new Module(n0);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("Module");
        }
    }

    final public Statement Statement() throws ParseException {
        trace_call("Statement");
        try {
            NodeChoice n0;
            Instruction n1;
            BranchStatement n2;
            WhileStatement n3;
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case MIX:
                case SPLIT:
                case DRAIN:
                case HEAT:
                case FOR:
                case DETECT:
                case REPEAT:
                case REAL:
                case NAT:
                case MAT:
                case IDENTIFIER: {
                    n1 = Instruction();
                    n0 = new NodeChoice(n1, 0);
                    break;
                }
                default:
                    jj_la1[5] = jj_gen;
                    if (jj_2_1(2147483647)) {
                        n2 = BranchStatement();
                        n0 = new NodeChoice(n2, 1);
                    } else if (jj_2_2(2147483647)) {
                        n3 = WhileStatement();
                        n0 = new NodeChoice(n3, 2);
                    } else {
                        jj_consume_token(-1);
                        throw new ParseException();
                    }
            }
            {
                if ("" != null) return new Statement(n0);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("Statement");
        }
    }

    final public Instruction Instruction() throws ParseException {
        trace_call("Instruction");
        try {
            NodeChoice n0;
            MixStatement n1;
            SplitStatement n2;
            DrainStatement n3;
            HeatStatement n4;
            DetectStatement n5;
            RepeatStatement n6;
            AssignmentStatement n7;
            if (jj_2_3(2147483647)) {
                n1 = MixStatement();
                n0 = new NodeChoice(n1, 0);
            } else {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case SPLIT: {
                        n2 = SplitStatement();
                        n0 = new NodeChoice(n2, 1);
                        break;
                    }
                    case DRAIN: {
                        n3 = DrainStatement();
                        n0 = new NodeChoice(n3, 2);
                        break;
                    }
                    case HEAT:
                    case FOR: {
                        n4 = HeatStatement();
                        n0 = new NodeChoice(n4, 3);
                        break;
                    }
                    case DETECT: {
                        n5 = DetectStatement();
                        n0 = new NodeChoice(n5, 4);
                        break;
                    }
                    case REPEAT: {
                        n6 = RepeatStatement();
                        n0 = new NodeChoice(n6, 5);
                        break;
                    }
                    case REAL:
                    case NAT:
                    case MAT:
                    case IDENTIFIER: {
                        n7 = AssignmentStatement();
                        n0 = new NodeChoice(n7, 6);
                        break;
                    }
                    default:
                        jj_la1[6] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
            {
                if ("" != null) return new Instruction(n0);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("Instruction");
        }
    }

    final public Function Function() throws ParseException {
        trace_call("Function");
        try {
            NodeToken n0;
            Token n1;
            Identifier n2;
            NodeToken n3;
            Token n4;
            FormalParameterList n5;
            NodeToken n6;
            Token n7;
            NodeOptional n8 = new NodeOptional();
            NodeSequence n9;
            NodeToken n10;
            Token n11;
            NodeListOptional n12;
            TypingList n13;
            NodeToken n14;
            Token n15;
            Statement n16;
            NodeToken n17;
            Token n18;
            n1 = jj_consume_token(FUNCTION);
            n0 = JTBToolkit.makeNodeToken(n1);
            n2 = Identifier();
            n4 = jj_consume_token(LPAREN);
            n3 = JTBToolkit.makeNodeToken(n4);
            n5 = FormalParameterList();
            n7 = jj_consume_token(RPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case COLON: {
                    n12 = new NodeListOptional();
                    n9 = new NodeSequence(2);
                    n11 = jj_consume_token(COLON);
                    n10 = JTBToolkit.makeNodeToken(n11);
                    n9.addNode(n10);
                    label_6:
                    while (true) {
                        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                            case REAL:
                            case NAT:
                            case MAT: {
                                ;
                                break;
                            }
                            default:
                                jj_la1[7] = jj_gen;
                                break label_6;
                        }
                        n13 = TypingList();
                        n12.addNode(n13);
                    }
                    n12.nodes.trimToSize();
                    n9.addNode(n12);
                    n8.addNode(n9);
                    break;
                }
                default:
                    jj_la1[8] = jj_gen;
                    ;
            }
            n15 = jj_consume_token(LBRACE);
            n14 = JTBToolkit.makeNodeToken(n15);
            n16 = Statement();
            n18 = jj_consume_token(LBRACE);
            n17 = JTBToolkit.makeNodeToken(n18);
            {
                if ("" != null) return new Function(n0, n2, n3, n5, n6, n8, n14, n16, n17);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("Function");
        }
    }

    final public TypingList TypingList() throws ParseException {
        trace_call("TypingList");
        try {
            Type n0;
            NodeListOptional n1 = new NodeListOptional();
            TypingRest n2;
            n0 = Type();
            label_7:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case COMMA: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[9] = jj_gen;
                        break label_7;
                }
                n2 = TypingRest();
                n1.addNode(n2);
            }
            n1.nodes.trimToSize();
            {
                if ("" != null) return new TypingList(n0, n1);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("TypingList");
        }
    }

    final public TypingRest TypingRest() throws ParseException {
        trace_call("TypingRest");
        try {
            NodeToken n0;
            Token n1;
            Type n2;
            n1 = jj_consume_token(COMMA);
            n0 = JTBToolkit.makeNodeToken(n1);
            n2 = Type();
            {
                if ("" != null) return new TypingRest(n0, n2);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("TypingRest");
        }
    }

    final public FormalParameterList FormalParameterList() throws ParseException {
        trace_call("FormalParameterList");
        try {
            FormalParameter n0;
            NodeListOptional n1 = new NodeListOptional();
            FormalParameterRest n2;
            n0 = FormalParameter();
            label_8:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case COMMA: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[10] = jj_gen;
                        break label_8;
                }
                n2 = FormalParameterRest();
                n1.addNode(n2);
            }
            n1.nodes.trimToSize();
            {
                if ("" != null) return new FormalParameterList(n0, n1);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("FormalParameterList");
        }
    }

    final public FormalParameter FormalParameter() throws ParseException {
        trace_call("FormalParameter");
        try {
            TypingList n0;
            Identifier n1;
            n0 = TypingList();
            n1 = Identifier();
            {
                if ("" != null) return new FormalParameter(n0, n1);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("FormalParameter");
        }
    }

    final public FormalParameterRest FormalParameterRest() throws ParseException {
        trace_call("FormalParameterRest");
        try {
            NodeToken n0;
            Token n1;
            FormalParameter n2;
            n1 = jj_consume_token(COMMA);
            n0 = JTBToolkit.makeNodeToken(n1);
            n2 = FormalParameter();
            {
                if ("" != null) return new FormalParameterRest(n0, n2);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("FormalParameterRest");
        }
    }

    final public MixStatement MixStatement() throws ParseException {
        trace_call("MixStatement");
        try {
            NodeChoice n0;
            NodeSequence n1;
            NodeToken n2;
            Token n3;
            PrimaryExpression n4;
            NodeToken n5;
            Token n6;
            PrimaryExpression n7;
            NodeSequence n8;
            NodeToken n9;
            Token n10;
            IntegerLiteral n11;
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case MIX: {
                    n1 = new NodeSequence(4);
                    n3 = jj_consume_token(MIX);
                    n2 = JTBToolkit.makeNodeToken(n3);
                    n1.addNode(n2);
                    n4 = PrimaryExpression();
                    n1.addNode(n4);
                    n6 = jj_consume_token(WITH);
                    n5 = JTBToolkit.makeNodeToken(n6);
                    n1.addNode(n5);
                    n7 = PrimaryExpression();
                    n1.addNode(n7);
                    n0 = new NodeChoice(n1, 0);
                    break;
                }
                case FOR: {
                    n8 = new NodeSequence(2);
                    n10 = jj_consume_token(FOR);
                    n9 = JTBToolkit.makeNodeToken(n10);
                    n8.addNode(n9);
                    n11 = IntegerLiteral();
                    n8.addNode(n11);
                    n0 = new NodeChoice(n8, 1);
                    break;
                }
                default:
                    jj_la1[11] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            {
                if ("" != null) return new MixStatement(n0);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("MixStatement");
        }
    }

    final public SplitStatement SplitStatement() throws ParseException {
        trace_call("SplitStatement");
        try {
            NodeToken n0;
            Token n1;
            PrimaryExpression n2;
            NodeToken n3;
            Token n4;
            PrimaryExpression n5;
            n1 = jj_consume_token(SPLIT);
            n0 = JTBToolkit.makeNodeToken(n1);
            n2 = PrimaryExpression();
            n4 = jj_consume_token(INTO);
            n3 = JTBToolkit.makeNodeToken(n4);
            n5 = PrimaryExpression();
            {
                if ("" != null) return new SplitStatement(n0, n2, n3, n5);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("SplitStatement");
        }
    }

    final public DrainStatement DrainStatement() throws ParseException {
        trace_call("DrainStatement");
        try {
            NodeToken n0;
            Token n1;
            PrimaryExpression n2;
            n1 = jj_consume_token(DRAIN);
            n0 = JTBToolkit.makeNodeToken(n1);
            n2 = PrimaryExpression();
            {
                if ("" != null) return new DrainStatement(n0, n2);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("DrainStatement");
        }
    }

    final public HeatStatement HeatStatement() throws ParseException {
        trace_call("HeatStatement");
        try {
            NodeChoice n0;
            NodeSequence n1;
            NodeToken n2;
            Token n3;
            PrimaryExpression n4;
            NodeToken n5;
            Token n6;
            IntegerLiteral n7;
            NodeSequence n8;
            NodeToken n9;
            Token n10;
            IntegerLiteral n11;
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case HEAT: {
                    n1 = new NodeSequence(4);
                    n3 = jj_consume_token(HEAT);
                    n2 = JTBToolkit.makeNodeToken(n3);
                    n1.addNode(n2);
                    n4 = PrimaryExpression();
                    n1.addNode(n4);
                    n6 = jj_consume_token(AT);
                    n5 = JTBToolkit.makeNodeToken(n6);
                    n1.addNode(n5);
                    n7 = IntegerLiteral();
                    n1.addNode(n7);
                    n0 = new NodeChoice(n1, 0);
                    break;
                }
                default:
                    jj_la1[12] = jj_gen;
                    if (jj_2_4(2147483647)) {
                        n8 = new NodeSequence(3);
                        n10 = jj_consume_token(FOR);
                        n9 = JTBToolkit.makeNodeToken(n10);
                        n8.addNode(n9);
                        n11 = IntegerLiteral();
                        n8.addNode(n11);
                        n0 = new NodeChoice(n8, 1);
                    } else {
                        jj_consume_token(-1);
                        throw new ParseException();
                    }
            }
            {
                if ("" != null) return new HeatStatement(n0);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("HeatStatement");
        }
    }

    final public DetectStatement DetectStatement() throws ParseException {
        trace_call("DetectStatement");
        try {
            NodeChoice n0;
            NodeSequence n1;
            NodeToken n2;
            Token n3;
            Identifier n4;
            NodeToken n5;
            Token n6;
            PrimaryExpression n7;
            NodeSequence n8;
            NodeToken n9;
            Token n10;
            NodeToken n11;
            Token n12;
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case DETECT: {
                    n1 = new NodeSequence(4);
                    n3 = jj_consume_token(DETECT);
                    n2 = JTBToolkit.makeNodeToken(n3);
                    n1.addNode(n2);
                    n4 = Identifier();
                    n1.addNode(n4);
                    n6 = jj_consume_token(ON);
                    n5 = JTBToolkit.makeNodeToken(n6);
                    n1.addNode(n5);
                    n7 = PrimaryExpression();
                    n1.addNode(n7);
                    n0 = new NodeChoice(n1, 0);
                    break;
                }
                case FOR: {
                    n8 = new NodeSequence(2);
                    n10 = jj_consume_token(FOR);
                    n9 = JTBToolkit.makeNodeToken(n10);
                    n8.addNode(n9);
                    n12 = jj_consume_token(INTEGER_LITERAL);
                    n11 = JTBToolkit.makeNodeToken(n12);
                    n8.addNode(n11);
                    n0 = new NodeChoice(n8, 1);
                    break;
                }
                default:
                    jj_la1[13] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            {
                if ("" != null) return new DetectStatement(n0);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("DetectStatement");
        }
    }

    final public RepeatStatement RepeatStatement() throws ParseException {
        trace_call("RepeatStatement");
        try {
            WhileStatement n0;
            n0 = WhileStatement();
            {
                if ("" != null) return new RepeatStatement(n0);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("RepeatStatement");
        }
    }

    final public AssignmentStatement AssignmentStatement() throws ParseException {
        trace_call("AssignmentStatement");
        try {
            NodeListOptional n0 = new NodeListOptional();
            TypingList n1;
            Identifier n2;
            NodeToken n3;
            Token n4;
            Expression n5;
            label_9:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case REAL:
                    case NAT:
                    case MAT: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[14] = jj_gen;
                        break label_9;
                }
                n1 = TypingList();
                n0.addNode(n1);
            }
            n0.nodes.trimToSize();
            n2 = Identifier();
            n4 = jj_consume_token(ASSIGN);
            n3 = JTBToolkit.makeNodeToken(n4);
            n5 = Expression();
            {
                if ("" != null) return new AssignmentStatement(n0, n2, n3, n5);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("AssignmentStatement");
        }
    }

    final public Type Type() throws ParseException {
        trace_call("Type");
        try {
            NodeChoice n0;
            MatLiteral n1;
            NatLiteral n2;
            RealLiteral n3;
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case MAT: {
                    n1 = MatLiteral();
                    n0 = new NodeChoice(n1, 0);
                    break;
                }
                case NAT: {
                    n2 = NatLiteral();
                    n0 = new NodeChoice(n2, 1);
                    break;
                }
                case REAL: {
                    n3 = RealLiteral();
                    n0 = new NodeChoice(n3, 2);
                    break;
                }
                default:
                    jj_la1[15] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            {
                if ("" != null) return new Type(n0);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("Type");
        }
    }

    final public BranchStatement BranchStatement() throws ParseException {
        trace_call("BranchStatement");
        try {
            NodeChoice n0;
            NodeSequence n1;
            NodeToken n2;
            Token n3;
            NodeToken n4;
            Token n5;
            Expression n6;
            NodeToken n7;
            Token n8;
            NodeToken n9;
            Token n10;
            Statement n11;
            NodeToken n12;
            Token n13;
            NodeSequence n14;
            NodeToken n15;
            Token n16;
            NodeToken n17;
            Token n18;
            Expression n19;
            NodeToken n20;
            Token n21;
            NodeToken n22;
            Token n23;
            Statement n24;
            NodeToken n25;
            Token n26;
            NodeSequence n27;
            NodeToken n28;
            Token n29;
            NodeToken n30;
            Token n31;
            Statement n32;
            NodeToken n33;
            Token n34;
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case IF: {
                    n1 = new NodeSequence(7);
                    n3 = jj_consume_token(IF);
                    n2 = JTBToolkit.makeNodeToken(n3);
                    n1.addNode(n2);
                    n5 = jj_consume_token(LPAREN);
                    n4 = JTBToolkit.makeNodeToken(n5);
                    n1.addNode(n4);
                    n6 = Expression();
                    n1.addNode(n6);
                    n8 = jj_consume_token(RPAREN);
                    n7 = JTBToolkit.makeNodeToken(n8);
                    n1.addNode(n7);
                    n10 = jj_consume_token(LBRACE);
                    n9 = JTBToolkit.makeNodeToken(n10);
                    n1.addNode(n9);
                    n11 = Statement();
                    n1.addNode(n11);
                    n13 = jj_consume_token(RBRACE);
                    n12 = JTBToolkit.makeNodeToken(n13);
                    n1.addNode(n12);
                    n0 = new NodeChoice(n1, 0);
                    break;
                }
                case ELSE_IF: {
                    n14 = new NodeSequence(7);
                    n16 = jj_consume_token(ELSE_IF);
                    n15 = JTBToolkit.makeNodeToken(n16);
                    n14.addNode(n15);
                    n18 = jj_consume_token(LPAREN);
                    n17 = JTBToolkit.makeNodeToken(n18);
                    n14.addNode(n17);
                    n19 = Expression();
                    n14.addNode(n19);
                    n21 = jj_consume_token(RPAREN);
                    n20 = JTBToolkit.makeNodeToken(n21);
                    n14.addNode(n20);
                    n23 = jj_consume_token(LBRACE);
                    n22 = JTBToolkit.makeNodeToken(n23);
                    n14.addNode(n22);
                    n24 = Statement();
                    n14.addNode(n24);
                    n26 = jj_consume_token(RBRACE);
                    n25 = JTBToolkit.makeNodeToken(n26);
                    n14.addNode(n25);
                    n0 = new NodeChoice(n14, 1);
                    break;
                }
                case ELSE: {
                    n27 = new NodeSequence(4);
                    n29 = jj_consume_token(ELSE);
                    n28 = JTBToolkit.makeNodeToken(n29);
                    n27.addNode(n28);
                    n31 = jj_consume_token(LBRACE);
                    n30 = JTBToolkit.makeNodeToken(n31);
                    n27.addNode(n30);
                    n32 = Statement();
                    n27.addNode(n32);
                    n34 = jj_consume_token(RBRACE);
                    n33 = JTBToolkit.makeNodeToken(n34);
                    n27.addNode(n33);
                    n0 = new NodeChoice(n27, 2);
                    break;
                }
                default:
                    jj_la1[16] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            {
                if ("" != null) return new BranchStatement(n0);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("BranchStatement");
        }
    }

    final public WhileStatement WhileStatement() throws ParseException {
        trace_call("WhileStatement");
        try {
            NodeToken n0;
            Token n1;
            IntegerLiteral n2;
            NodeToken n3;
            Token n4;
            NodeToken n5;
            Token n6;
            Statement n7;
            NodeToken n8;
            Token n9;
            n1 = jj_consume_token(REPEAT);
            n0 = JTBToolkit.makeNodeToken(n1);
            n2 = IntegerLiteral();
            n4 = jj_consume_token(TIMES);
            n3 = JTBToolkit.makeNodeToken(n4);
            n6 = jj_consume_token(LBRACE);
            n5 = JTBToolkit.makeNodeToken(n6);
            n7 = Statement();
            n9 = jj_consume_token(RBRACE);
            n8 = JTBToolkit.makeNodeToken(n9);
            {
                if ("" != null) return new WhileStatement(n0, n2, n3, n5, n7, n8);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("WhileStatement");
        }
    }

    final public PrimaryExpression PrimaryExpression() throws ParseException {
        trace_call("PrimaryExpression");
        try {
            NodeChoice n0;
            IntegerLiteral n1;
            TrueLiteral n2;
            FalseLiteral n3;
            Identifier n4;
            ParenthesisExpression n5;
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case INTEGER_LITERAL: {
                    n1 = IntegerLiteral();
                    n0 = new NodeChoice(n1, 0);
                    break;
                }
                case TRUE: {
                    n2 = TrueLiteral();
                    n0 = new NodeChoice(n2, 1);
                    break;
                }
                case FALSE: {
                    n3 = FalseLiteral();
                    n0 = new NodeChoice(n3, 2);
                    break;
                }
                case IDENTIFIER: {
                    n4 = Identifier();
                    n0 = new NodeChoice(n4, 3);
                    break;
                }
                case LPAREN: {
                    n5 = ParenthesisExpression();
                    n0 = new NodeChoice(n5, 4);
                    break;
                }
                default:
                    jj_la1[17] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            {
                if ("" != null) return new PrimaryExpression(n0);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("PrimaryExpression");
        }
    }

    final public IntegerLiteral IntegerLiteral() throws ParseException {
        trace_call("IntegerLiteral");
        try {
            NodeToken n0;
            Token n1;
            n1 = jj_consume_token(INTEGER_LITERAL);
            n0 = JTBToolkit.makeNodeToken(n1);
            {
                if ("" != null) return new IntegerLiteral(n0);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("IntegerLiteral");
        }
    }

    final public NatLiteral NatLiteral() throws ParseException {
        trace_call("NatLiteral");
        try {
            NodeToken n0;
            Token n1;
            n1 = jj_consume_token(NAT);
            n0 = JTBToolkit.makeNodeToken(n1);
            {
                if ("" != null) return new NatLiteral(n0);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("NatLiteral");
        }
    }

    final public MatLiteral MatLiteral() throws ParseException {
        trace_call("MatLiteral");
        try {
            NodeToken n0;
            Token n1;
            n1 = jj_consume_token(MAT);
            n0 = JTBToolkit.makeNodeToken(n1);
            {
                if ("" != null) return new MatLiteral(n0);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("MatLiteral");
        }
    }

    final public RealLiteral RealLiteral() throws ParseException {
        trace_call("RealLiteral");
        try {
            NodeToken n0;
            Token n1;
            n1 = jj_consume_token(REAL);
            n0 = JTBToolkit.makeNodeToken(n1);
            {
                if ("" != null) return new RealLiteral(n0);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("RealLiteral");
        }
    }

    final public TrueLiteral TrueLiteral() throws ParseException {
        trace_call("TrueLiteral");
        try {
            NodeToken n0;
            Token n1;
            n1 = jj_consume_token(TRUE);
            n0 = JTBToolkit.makeNodeToken(n1);
            {
                if ("" != null) return new TrueLiteral(n0);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("TrueLiteral");
        }
    }

    final public FalseLiteral FalseLiteral() throws ParseException {
        trace_call("FalseLiteral");
        try {
            NodeToken n0;
            Token n1;
            n1 = jj_consume_token(FALSE);
            n0 = JTBToolkit.makeNodeToken(n1);
            {
                if ("" != null) return new FalseLiteral(n0);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("FalseLiteral");
        }
    }

    final public Identifier Identifier() throws ParseException {
        trace_call("Identifier");
        try {
            NodeToken n0;
            Token n1;
            n1 = jj_consume_token(IDENTIFIER);
            n0 = JTBToolkit.makeNodeToken(n1);
            {
                if ("" != null) return new Identifier(n0);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("Identifier");
        }
    }

    final public Expression Expression() throws ParseException {
        trace_call("Expression");
        try {
            NodeChoice n0;
            AndExpression n1;
            LessThanExpression n2;
            LessThanEqualExpression n3;
            GreaterThanExpression n4;
            GreaterThanEqualExpression n5;
            NotEqualExpression n6;
            EqualityExpression n7;
            OrExpression n8;
            PlusExpression n9;
            MinusExpression n10;
            TimesExpression n11;
            PrimaryExpression n12;
            if (jj_2_5(2147483647)) {
                n1 = AndExpression();
                n0 = new NodeChoice(n1, 0);
            } else if (jj_2_6(2147483647)) {
                n2 = LessThanExpression();
                n0 = new NodeChoice(n2, 1);
            } else if (jj_2_7(2147483647)) {
                n3 = LessThanEqualExpression();
                n0 = new NodeChoice(n3, 2);
            } else if (jj_2_8(2147483647)) {
                n4 = GreaterThanExpression();
                n0 = new NodeChoice(n4, 3);
            } else if (jj_2_9(2147483647)) {
                n5 = GreaterThanEqualExpression();
                n0 = new NodeChoice(n5, 4);
            } else if (jj_2_10(2147483647)) {
                n6 = NotEqualExpression();
                n0 = new NodeChoice(n6, 5);
            } else if (jj_2_11(2147483647)) {
                n7 = EqualityExpression();
                n0 = new NodeChoice(n7, 6);
            } else if (jj_2_12(2147483647)) {
                n8 = OrExpression();
                n0 = new NodeChoice(n8, 7);
            } else if (jj_2_13(2147483647)) {
                n9 = PlusExpression();
                n0 = new NodeChoice(n9, 8);
            } else if (jj_2_14(2147483647)) {
                n10 = MinusExpression();
                n0 = new NodeChoice(n10, 9);
            } else if (jj_2_15(2147483647)) {
                n11 = TimesExpression();
                n0 = new NodeChoice(n11, 10);
            } else {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case LPAREN:
                    case TRUE:
                    case FALSE:
                    case INTEGER_LITERAL:
                    case IDENTIFIER: {
                        n12 = PrimaryExpression();
                        n0 = new NodeChoice(n12, 11);
                        break;
                    }
                    default:
                        jj_la1[18] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
            {
                if ("" != null) return new Expression(n0);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("Expression");
        }
    }

    final public AndExpression AndExpression() throws ParseException {
        trace_call("AndExpression");
        try {
            PrimaryExpression n0;
            NodeToken n1;
            Token n2;
            PrimaryExpression n3;
            n0 = PrimaryExpression();
            n2 = jj_consume_token(AND);
            n1 = JTBToolkit.makeNodeToken(n2);
            n3 = PrimaryExpression();
            {
                if ("" != null) return new AndExpression(n0, n1, n3);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("AndExpression");
        }
    }

    final public LessThanExpression LessThanExpression() throws ParseException {
        trace_call("LessThanExpression");
        try {
            PrimaryExpression n0;
            NodeToken n1;
            Token n2;
            PrimaryExpression n3;
            n0 = PrimaryExpression();
            n2 = jj_consume_token(LESSTHAN);
            n1 = JTBToolkit.makeNodeToken(n2);
            n3 = PrimaryExpression();
            {
                if ("" != null) return new LessThanExpression(n0, n1, n3);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("LessThanExpression");
        }
    }

    final public LessThanEqualExpression LessThanEqualExpression() throws ParseException {
        trace_call("LessThanEqualExpression");
        try {
            PrimaryExpression n0;
            NodeToken n1;
            Token n2;
            PrimaryExpression n3;
            n0 = PrimaryExpression();
            n2 = jj_consume_token(LESSTHANEQUAL);
            n1 = JTBToolkit.makeNodeToken(n2);
            n3 = PrimaryExpression();
            {
                if ("" != null) return new LessThanEqualExpression(n0, n1, n3);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("LessThanEqualExpression");
        }
    }

    final public GreaterThanExpression GreaterThanExpression() throws ParseException {
        trace_call("GreaterThanExpression");
        try {
            PrimaryExpression n0;
            NodeToken n1;
            Token n2;
            PrimaryExpression n3;
            n0 = PrimaryExpression();
            n2 = jj_consume_token(GREATERTHAN);
            n1 = JTBToolkit.makeNodeToken(n2);
            n3 = PrimaryExpression();
            {
                if ("" != null) return new GreaterThanExpression(n0, n1, n3);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("GreaterThanExpression");
        }
    }

    final public GreaterThanEqualExpression GreaterThanEqualExpression() throws ParseException {
        trace_call("GreaterThanEqualExpression");
        try {
            PrimaryExpression n0;
            NodeToken n1;
            Token n2;
            PrimaryExpression n3;
            n0 = PrimaryExpression();
            n2 = jj_consume_token(GREATERTHANEQUAL);
            n1 = JTBToolkit.makeNodeToken(n2);
            n3 = PrimaryExpression();
            {
                if ("" != null) return new GreaterThanEqualExpression(n0, n1, n3);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("GreaterThanEqualExpression");
        }
    }

    final public NotEqualExpression NotEqualExpression() throws ParseException {
        trace_call("NotEqualExpression");
        try {
            PrimaryExpression n0;
            NodeToken n1;
            Token n2;
            PrimaryExpression n3;
            n0 = PrimaryExpression();
            n2 = jj_consume_token(NOTEQUAL);
            n1 = JTBToolkit.makeNodeToken(n2);
            n3 = PrimaryExpression();
            {
                if ("" != null) return new NotEqualExpression(n0, n1, n3);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("NotEqualExpression");
        }
    }

    final public EqualityExpression EqualityExpression() throws ParseException {
        trace_call("EqualityExpression");
        try {
            PrimaryExpression n0;
            NodeToken n1;
            Token n2;
            PrimaryExpression n3;
            n0 = PrimaryExpression();
            n2 = jj_consume_token(OR);
            n1 = JTBToolkit.makeNodeToken(n2);
            n3 = PrimaryExpression();
            {
                if ("" != null) return new EqualityExpression(n0, n1, n3);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("EqualityExpression");
        }
    }

    final public OrExpression OrExpression() throws ParseException {
        trace_call("OrExpression");
        try {
            PrimaryExpression n0;
            NodeToken n1;
            Token n2;
            PrimaryExpression n3;
            n0 = PrimaryExpression();
            n2 = jj_consume_token(LESSTHAN);
            n1 = JTBToolkit.makeNodeToken(n2);
            n3 = PrimaryExpression();
            {
                if ("" != null) return new OrExpression(n0, n1, n3);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("OrExpression");
        }
    }

    final public PlusExpression PlusExpression() throws ParseException {
        trace_call("PlusExpression");
        try {
            PrimaryExpression n0;
            NodeToken n1;
            Token n2;
            PrimaryExpression n3;
            n0 = PrimaryExpression();
            n2 = jj_consume_token(ADD);
            n1 = JTBToolkit.makeNodeToken(n2);
            n3 = PrimaryExpression();
            {
                if ("" != null) return new PlusExpression(n0, n1, n3);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("PlusExpression");
        }
    }

    final public MinusExpression MinusExpression() throws ParseException {
        trace_call("MinusExpression");
        try {
            PrimaryExpression n0;
            NodeToken n1;
            Token n2;
            PrimaryExpression n3;
            n0 = PrimaryExpression();
            n2 = jj_consume_token(MINUS);
            n1 = JTBToolkit.makeNodeToken(n2);
            n3 = PrimaryExpression();
            {
                if ("" != null) return new MinusExpression(n0, n1, n3);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("MinusExpression");
        }
    }

    final public TimesExpression TimesExpression() throws ParseException {
        trace_call("TimesExpression");
        try {
            PrimaryExpression n0;
            NodeToken n1;
            Token n2;
            PrimaryExpression n3;
            n0 = PrimaryExpression();
            n2 = jj_consume_token(MULTIPLY);
            n1 = JTBToolkit.makeNodeToken(n2);
            n3 = PrimaryExpression();
            {
                if ("" != null) return new TimesExpression(n0, n1, n3);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("TimesExpression");
        }
    }

    final public NotExpression NotExpression() throws ParseException {
        trace_call("NotExpression");
        try {
            NodeToken n0;
            Token n1;
            Expression n2;
            n1 = jj_consume_token(BANG);
            n0 = JTBToolkit.makeNodeToken(n1);
            n2 = Expression();
            {
                if ("" != null) return new NotExpression(n0, n2);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("NotExpression");
        }
    }

    final public ParenthesisExpression ParenthesisExpression() throws ParseException {
        trace_call("ParenthesisExpression");
        try {
            NodeToken n0;
            Token n1;
            Expression n2;
            NodeToken n3;
            Token n4;
            n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
            n2 = Expression();
            n4 = jj_consume_token(RPAREN);
            n3 = JTBToolkit.makeNodeToken(n4);
            {
                if ("" != null) return new ParenthesisExpression(n0, n2, n3);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("ParenthesisExpression");
        }
    }

    private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_1();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(0, xla);
        }
    }

    private boolean jj_2_2(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_2();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(1, xla);
        }
    }

    private boolean jj_2_3(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_3();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(2, xla);
        }
    }

    private boolean jj_2_4(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_4();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(3, xla);
        }
    }

    private boolean jj_2_5(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_5();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(4, xla);
        }
    }

    private boolean jj_2_6(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_6();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(5, xla);
        }
    }

    private boolean jj_2_7(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_7();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(6, xla);
        }
    }

    private boolean jj_2_8(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_8();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(7, xla);
        }
    }

    private boolean jj_2_9(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_9();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(8, xla);
        }
    }

    private boolean jj_2_10(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_10();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(9, xla);
        }
    }

    private boolean jj_2_11(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_11();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(10, xla);
        }
    }

    private boolean jj_2_12(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_12();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(11, xla);
        }
    }

    private boolean jj_2_13(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_13();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(12, xla);
        }
    }

    private boolean jj_2_14(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_14();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(13, xla);
        }
    }

    private boolean jj_2_15(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_15();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(14, xla);
        }
    }

    private boolean jj_3R_54() {
        if (!jj_rescan) trace_call("WhileStatement(LOOKING AHEAD...)");
        if (jj_scan_token(REPEAT)) {
            if (!jj_rescan) trace_return("WhileStatement(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_3R_11()) {
            if (!jj_rescan) trace_return("WhileStatement(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(TIMES)) {
            if (!jj_rescan) trace_return("WhileStatement(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(LBRACE)) {
            if (!jj_rescan) trace_return("WhileStatement(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_3R_22()) {
            if (!jj_rescan) trace_return("WhileStatement(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(RBRACE)) {
            if (!jj_rescan) trace_return("WhileStatement(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("WhileStatement(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3_11() {
        if (jj_3R_12()) return true;
        if (jj_scan_token(EQUALITY)) return true;
        return false;
    }

    private boolean jj_3R_35() {
        if (jj_3R_50()) return true;
        return false;
    }

    private boolean jj_3_10() {
        if (jj_3R_12()) return true;
        if (jj_scan_token(NOTEQUAL)) return true;
        return false;
    }

    private boolean jj_3R_34() {
        if (jj_3R_49()) return true;
        return false;
    }

    private boolean jj_3_9() {
        if (jj_3R_12()) return true;
        if (jj_scan_token(GREATERTHANEQUAL)) return true;
        return false;
    }

    private boolean jj_3R_33() {
        if (jj_3R_48()) return true;
        return false;
    }

    private boolean jj_3R_78() {
        if (jj_3R_82()) return true;
        return false;
    }

    private boolean jj_3_8() {
        if (jj_3R_12()) return true;
        if (jj_scan_token(GREATERTHAN)) return true;
        return false;
    }

    private boolean jj_3R_32() {
        if (jj_3R_47()) return true;
        return false;
    }

    private boolean jj_3R_51() {
        if (!jj_rescan) trace_call("MinusExpression(LOOKING AHEAD...)");
        if (jj_3R_12()) {
            if (!jj_rescan) trace_return("MinusExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(MINUS)) {
            if (!jj_rescan) trace_return("MinusExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_3R_12()) {
            if (!jj_rescan) trace_return("MinusExpression(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("MinusExpression(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3_4() {
        if (jj_scan_token(FOR)) return true;
        if (jj_scan_token(INTEGER_LITERAL)) return true;
        return false;
    }

    private boolean jj_3_7() {
        if (jj_3R_12()) return true;
        if (jj_scan_token(LESSTHANEQUAL)) return true;
        return false;
    }

    private boolean jj_3R_76() {
        if (!jj_rescan) trace_call("TypingList(LOOKING AHEAD...)");
        if (jj_3R_77()) {
            if (!jj_rescan) trace_return("TypingList(LOOKAHEAD FAILED)");
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_78()) {
                jj_scanpos = xsp;
                break;
            }
        }
        {
            if (!jj_rescan) trace_return("TypingList(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_31() {
        if (jj_3R_46()) return true;
        return false;
    }

    private boolean jj_3_6() {
        if (jj_3R_12()) return true;
        if (jj_scan_token(LESSTHAN)) return true;
        return false;
    }

    private boolean jj_3R_30() {
        if (jj_3R_45()) return true;
        return false;
    }

    private boolean jj_3_5() {
        if (jj_3R_12()) return true;
        if (jj_scan_token(AND)) return true;
        return false;
    }

    private boolean jj_3R_72() {
        if (jj_scan_token(FOR)) return true;
        if (jj_3R_11()) return true;
        return false;
    }

    private boolean jj_3R_29() {
        if (jj_3R_44()) return true;
        return false;
    }

    private boolean jj_3R_15() {
        if (jj_scan_token(ELSE)) return true;
        if (jj_scan_token(LBRACE)) return true;
        if (jj_3R_22()) return true;
        if (jj_scan_token(RBRACE)) return true;
        return false;
    }

    private boolean jj_3R_28() {
        if (jj_3R_43()) return true;
        return false;
    }

    private boolean jj_3R_50() {
        if (!jj_rescan) trace_call("PlusExpression(LOOKING AHEAD...)");
        if (jj_3R_12()) {
            if (!jj_rescan) trace_return("PlusExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(ADD)) {
            if (!jj_rescan) trace_return("PlusExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_3R_12()) {
            if (!jj_rescan) trace_return("PlusExpression(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("PlusExpression(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_27() {
        if (jj_3R_42()) return true;
        return false;
    }

    private boolean jj_3R_71() {
        if (jj_scan_token(HEAT)) return true;
        if (jj_3R_12()) return true;
        if (jj_scan_token(AT)) return true;
        if (jj_3R_11()) return true;
        return false;
    }

    private boolean jj_3R_21() {
        if (!jj_rescan) trace_call("Expression(LOOKING AHEAD...)");
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_27()) {
            jj_scanpos = xsp;
            if (jj_3R_28()) {
                jj_scanpos = xsp;
                if (jj_3R_29()) {
                    jj_scanpos = xsp;
                    if (jj_3R_30()) {
                        jj_scanpos = xsp;
                        if (jj_3R_31()) {
                            jj_scanpos = xsp;
                            if (jj_3R_32()) {
                                jj_scanpos = xsp;
                                if (jj_3R_33()) {
                                    jj_scanpos = xsp;
                                    if (jj_3R_34()) {
                                        jj_scanpos = xsp;
                                        if (jj_3R_35()) {
                                            jj_scanpos = xsp;
                                            if (jj_3R_36()) {
                                                jj_scanpos = xsp;
                                                if (jj_3R_37()) {
                                                    jj_scanpos = xsp;
                                                    if (jj_3R_38()) {
                                                        if (!jj_rescan)
                                                            trace_return("Expression(LOOKAHEAD FAILED)");
                                                        return true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        {
            if (!jj_rescan) trace_return("Expression(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_65() {
        if (!jj_rescan) trace_call("HeatStatement(LOOKING AHEAD...)");
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_71()) {
            jj_scanpos = xsp;
            if (jj_3R_72()) {
                if (!jj_rescan) trace_return("HeatStatement(LOOKAHEAD FAILED)");
                return true;
            }
        }
        {
            if (!jj_rescan) trace_return("HeatStatement(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_14() {
        if (jj_scan_token(ELSE_IF)) return true;
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_21()) return true;
        if (jj_scan_token(RPAREN)) return true;
        if (jj_scan_token(LBRACE)) return true;
        if (jj_3R_22()) return true;
        if (jj_scan_token(RBRACE)) return true;
        return false;
    }

    private boolean jj_3R_49() {
        if (!jj_rescan) trace_call("OrExpression(LOOKING AHEAD...)");
        if (jj_3R_12()) {
            if (!jj_rescan) trace_return("OrExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(LESSTHAN)) {
            if (!jj_rescan) trace_return("OrExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_3R_12()) {
            if (!jj_rescan) trace_return("OrExpression(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("OrExpression(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_13() {
        if (jj_scan_token(IF)) return true;
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_21()) return true;
        if (jj_scan_token(RPAREN)) return true;
        if (jj_scan_token(LBRACE)) return true;
        if (jj_3R_22()) return true;
        if (jj_scan_token(RBRACE)) return true;
        return false;
    }

    private boolean jj_3R_25() {
        if (!jj_rescan) trace_call("Identifier(LOOKING AHEAD...)");
        if (jj_scan_token(IDENTIFIER)) {
            if (!jj_rescan) trace_return("Identifier(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("Identifier(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_64() {
        if (!jj_rescan) trace_call("DrainStatement(LOOKING AHEAD...)");
        if (jj_scan_token(DRAIN)) {
            if (!jj_rescan) trace_return("DrainStatement(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_3R_12()) {
            if (!jj_rescan) trace_return("DrainStatement(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("DrainStatement(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_10() {
        if (!jj_rescan) trace_call("BranchStatement(LOOKING AHEAD...)");
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_13()) {
            jj_scanpos = xsp;
            if (jj_3R_14()) {
                jj_scanpos = xsp;
                if (jj_3R_15()) {
                    if (!jj_rescan) trace_return("BranchStatement(LOOKAHEAD FAILED)");
                    return true;
                }
            }
        }
        {
            if (!jj_rescan) trace_return("BranchStatement(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_48() {
        if (!jj_rescan) trace_call("EqualityExpression(LOOKING AHEAD...)");
        if (jj_3R_12()) {
            if (!jj_rescan) trace_return("EqualityExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(OR)) {
            if (!jj_rescan) trace_return("EqualityExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_3R_12()) {
            if (!jj_rescan) trace_return("EqualityExpression(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("EqualityExpression(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_24() {
        if (!jj_rescan) trace_call("FalseLiteral(LOOKING AHEAD...)");
        if (jj_scan_token(FALSE)) {
            if (!jj_rescan) trace_return("FalseLiteral(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("FalseLiteral(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_61() {
        if (jj_3R_68()) return true;
        return false;
    }

    private boolean jj_3R_63() {
        if (!jj_rescan) trace_call("SplitStatement(LOOKING AHEAD...)");
        if (jj_scan_token(SPLIT)) {
            if (!jj_rescan) trace_return("SplitStatement(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_3R_12()) {
            if (!jj_rescan) trace_return("SplitStatement(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(INTO)) {
            if (!jj_rescan) trace_return("SplitStatement(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_3R_12()) {
            if (!jj_rescan) trace_return("SplitStatement(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("SplitStatement(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_47() {
        if (!jj_rescan) trace_call("NotEqualExpression(LOOKING AHEAD...)");
        if (jj_3R_12()) {
            if (!jj_rescan) trace_return("NotEqualExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(NOTEQUAL)) {
            if (!jj_rescan) trace_return("NotEqualExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_3R_12()) {
            if (!jj_rescan) trace_return("NotEqualExpression(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("NotEqualExpression(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_60() {
        if (jj_3R_67()) return true;
        return false;
    }

    private boolean jj_3R_59() {
        if (jj_3R_66()) return true;
        return false;
    }

    private boolean jj_3R_23() {
        if (!jj_rescan) trace_call("TrueLiteral(LOOKING AHEAD...)");
        if (jj_scan_token(TRUE)) {
            if (!jj_rescan) trace_return("TrueLiteral(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("TrueLiteral(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3_3() {
        if (jj_scan_token(MIX)) return true;
        if (jj_3R_12()) return true;
        return false;
    }

    private boolean jj_3R_58() {
        if (jj_3R_65()) return true;
        return false;
    }

    private boolean jj_3R_57() {
        if (jj_3R_64()) return true;
        return false;
    }

    private boolean jj_3R_56() {
        if (jj_3R_63()) return true;
        return false;
    }

    private boolean jj_3R_46() {
        if (!jj_rescan) trace_call("GreaterThanEqualExpression(LOOKING AHEAD...)");
        if (jj_3R_12()) {
            if (!jj_rescan) trace_return("GreaterThanEqualExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(GREATERTHANEQUAL)) {
            if (!jj_rescan) trace_return("GreaterThanEqualExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_3R_12()) {
            if (!jj_rescan) trace_return("GreaterThanEqualExpression(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("GreaterThanEqualExpression(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_55() {
        if (jj_3R_62()) return true;
        return false;
    }

    private boolean jj_3R_85() {
        if (!jj_rescan) trace_call("RealLiteral(LOOKING AHEAD...)");
        if (jj_scan_token(REAL)) {
            if (!jj_rescan) trace_return("RealLiteral(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("RealLiteral(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_70() {
        if (jj_scan_token(FOR)) return true;
        if (jj_3R_11()) return true;
        return false;
    }

    private boolean jj_3R_53() {
        if (!jj_rescan) trace_call("Instruction(LOOKING AHEAD...)");
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_55()) {
            jj_scanpos = xsp;
            if (jj_3R_56()) {
                jj_scanpos = xsp;
                if (jj_3R_57()) {
                    jj_scanpos = xsp;
                    if (jj_3R_58()) {
                        jj_scanpos = xsp;
                        if (jj_3R_59()) {
                            jj_scanpos = xsp;
                            if (jj_3R_60()) {
                                jj_scanpos = xsp;
                                if (jj_3R_61()) {
                                    if (!jj_rescan) trace_return("Instruction(LOOKAHEAD FAILED)");
                                    return true;
                                }
                            }
                        }
                    }
                }
            }
        }
        {
            if (!jj_rescan) trace_return("Instruction(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_81() {
        if (jj_3R_85()) return true;
        return false;
    }

    private boolean jj_3_2() {
        if (jj_scan_token(REPEAT)) return true;
        if (jj_3R_11()) return true;
        return false;
    }

    private boolean jj_3R_80() {
        if (jj_3R_84()) return true;
        return false;
    }

    private boolean jj_3R_69() {
        if (jj_scan_token(MIX)) return true;
        if (jj_3R_12()) return true;
        if (jj_scan_token(WITH)) return true;
        if (jj_3R_12()) return true;
        return false;
    }

    private boolean jj_3R_83() {
        if (!jj_rescan) trace_call("MatLiteral(LOOKING AHEAD...)");
        if (jj_scan_token(MAT)) {
            if (!jj_rescan) trace_return("MatLiteral(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("MatLiteral(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_79() {
        if (jj_3R_83()) return true;
        return false;
    }

    private boolean jj_3_1() {
        if (jj_3R_10()) return true;
        return false;
    }

    private boolean jj_3R_45() {
        if (!jj_rescan) trace_call("GreaterThanExpression(LOOKING AHEAD...)");
        if (jj_3R_12()) {
            if (!jj_rescan) trace_return("GreaterThanExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(GREATERTHAN)) {
            if (!jj_rescan) trace_return("GreaterThanExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_3R_12()) {
            if (!jj_rescan) trace_return("GreaterThanExpression(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("GreaterThanExpression(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_62() {
        if (!jj_rescan) trace_call("MixStatement(LOOKING AHEAD...)");
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_69()) {
            jj_scanpos = xsp;
            if (jj_3R_70()) {
                if (!jj_rescan) trace_return("MixStatement(LOOKAHEAD FAILED)");
                return true;
            }
        }
        {
            if (!jj_rescan) trace_return("MixStatement(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_77() {
        if (!jj_rescan) trace_call("Type(LOOKING AHEAD...)");
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_79()) {
            jj_scanpos = xsp;
            if (jj_3R_80()) {
                jj_scanpos = xsp;
                if (jj_3R_81()) {
                    if (!jj_rescan) trace_return("Type(LOOKAHEAD FAILED)");
                    return true;
                }
            }
        }
        {
            if (!jj_rescan) trace_return("Type(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_41() {
        if (jj_3R_54()) return true;
        return false;
    }

    private boolean jj_3R_40() {
        if (jj_3R_10()) return true;
        return false;
    }

    private boolean jj_3R_84() {
        if (!jj_rescan) trace_call("NatLiteral(LOOKING AHEAD...)");
        if (jj_scan_token(NAT)) {
            if (!jj_rescan) trace_return("NatLiteral(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("NatLiteral(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_39() {
        if (jj_3R_53()) return true;
        return false;
    }

    private boolean jj_3R_22() {
        if (!jj_rescan) trace_call("Statement(LOOKING AHEAD...)");
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_39()) {
            jj_scanpos = xsp;
            if (jj_3R_40()) {
                jj_scanpos = xsp;
                if (jj_3R_41()) {
                    if (!jj_rescan) trace_return("Statement(LOOKAHEAD FAILED)");
                    return true;
                }
            }
        }
        {
            if (!jj_rescan) trace_return("Statement(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_44() {
        if (!jj_rescan) trace_call("LessThanEqualExpression(LOOKING AHEAD...)");
        if (jj_3R_12()) {
            if (!jj_rescan) trace_return("LessThanEqualExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(LESSTHANEQUAL)) {
            if (!jj_rescan) trace_return("LessThanEqualExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_3R_12()) {
            if (!jj_rescan) trace_return("LessThanEqualExpression(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("LessThanEqualExpression(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_75() {
        if (jj_3R_76()) return true;
        return false;
    }

    private boolean jj_3R_11() {
        if (!jj_rescan) trace_call("IntegerLiteral(LOOKING AHEAD...)");
        if (jj_scan_token(INTEGER_LITERAL)) {
            if (!jj_rescan) trace_return("IntegerLiteral(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("IntegerLiteral(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_68() {
        if (!jj_rescan) trace_call("AssignmentStatement(LOOKING AHEAD...)");
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_75()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_3R_25()) {
            if (!jj_rescan) trace_return("AssignmentStatement(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(ASSIGN)) {
            if (!jj_rescan) trace_return("AssignmentStatement(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_3R_21()) {
            if (!jj_rescan) trace_return("AssignmentStatement(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("AssignmentStatement(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_43() {
        if (!jj_rescan) trace_call("LessThanExpression(LOOKING AHEAD...)");
        if (jj_3R_12()) {
            if (!jj_rescan) trace_return("LessThanExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(LESSTHAN)) {
            if (!jj_rescan) trace_return("LessThanExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_3R_12()) {
            if (!jj_rescan) trace_return("LessThanExpression(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("LessThanExpression(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_20() {
        if (jj_3R_26()) return true;
        return false;
    }

    private boolean jj_3R_19() {
        if (jj_3R_25()) return true;
        return false;
    }

    private boolean jj_3R_26() {
        if (!jj_rescan) trace_call("ParenthesisExpression(LOOKING AHEAD...)");
        if (jj_scan_token(LPAREN)) {
            if (!jj_rescan) trace_return("ParenthesisExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_3R_21()) {
            if (!jj_rescan) trace_return("ParenthesisExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(RPAREN)) {
            if (!jj_rescan) trace_return("ParenthesisExpression(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("ParenthesisExpression(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_18() {
        if (jj_3R_24()) return true;
        return false;
    }

    private boolean jj_3R_67() {
        if (!jj_rescan) trace_call("RepeatStatement(LOOKING AHEAD...)");
        if (jj_3R_54()) {
            if (!jj_rescan) trace_return("RepeatStatement(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("RepeatStatement(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_17() {
        if (jj_3R_23()) return true;
        return false;
    }

    private boolean jj_3R_16() {
        if (jj_3R_11()) return true;
        return false;
    }

    private boolean jj_3R_42() {
        if (!jj_rescan) trace_call("AndExpression(LOOKING AHEAD...)");
        if (jj_3R_12()) {
            if (!jj_rescan) trace_return("AndExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(AND)) {
            if (!jj_rescan) trace_return("AndExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_3R_12()) {
            if (!jj_rescan) trace_return("AndExpression(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("AndExpression(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_12() {
        if (!jj_rescan) trace_call("PrimaryExpression(LOOKING AHEAD...)");
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_16()) {
            jj_scanpos = xsp;
            if (jj_3R_17()) {
                jj_scanpos = xsp;
                if (jj_3R_18()) {
                    jj_scanpos = xsp;
                    if (jj_3R_19()) {
                        jj_scanpos = xsp;
                        if (jj_3R_20()) {
                            if (!jj_rescan) trace_return("PrimaryExpression(LOOKAHEAD FAILED)");
                            return true;
                        }
                    }
                }
            }
        }
        {
            if (!jj_rescan) trace_return("PrimaryExpression(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_74() {
        if (jj_scan_token(FOR)) return true;
        if (jj_scan_token(INTEGER_LITERAL)) return true;
        return false;
    }

    private boolean jj_3_15() {
        if (jj_3R_12()) return true;
        if (jj_scan_token(MULTIPLY)) return true;
        return false;
    }

    private boolean jj_3_14() {
        if (jj_3R_12()) return true;
        if (jj_scan_token(MINUS)) return true;
        return false;
    }

    private boolean jj_3R_38() {
        if (jj_3R_12()) return true;
        return false;
    }

    private boolean jj_3_13() {
        if (jj_3R_12()) return true;
        if (jj_scan_token(ADD)) return true;
        return false;
    }

    private boolean jj_3R_73() {
        if (jj_scan_token(DETECT)) return true;
        if (jj_3R_25()) return true;
        if (jj_scan_token(ON)) return true;
        if (jj_3R_12()) return true;
        return false;
    }

    private boolean jj_3R_37() {
        if (jj_3R_52()) return true;
        return false;
    }

    private boolean jj_3_12() {
        if (jj_3R_12()) return true;
        if (jj_scan_token(OR)) return true;
        return false;
    }

    private boolean jj_3R_52() {
        if (!jj_rescan) trace_call("TimesExpression(LOOKING AHEAD...)");
        if (jj_3R_12()) {
            if (!jj_rescan) trace_return("TimesExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(MULTIPLY)) {
            if (!jj_rescan) trace_return("TimesExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_3R_12()) {
            if (!jj_rescan) trace_return("TimesExpression(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("TimesExpression(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_82() {
        if (!jj_rescan) trace_call("TypingRest(LOOKING AHEAD...)");
        if (jj_scan_token(COMMA)) {
            if (!jj_rescan) trace_return("TypingRest(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_3R_77()) {
            if (!jj_rescan) trace_return("TypingRest(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("TypingRest(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_66() {
        if (!jj_rescan) trace_call("DetectStatement(LOOKING AHEAD...)");
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_73()) {
            jj_scanpos = xsp;
            if (jj_3R_74()) {
                if (!jj_rescan) trace_return("DetectStatement(LOOKAHEAD FAILED)");
                return true;
            }
        }
        {
            if (!jj_rescan) trace_return("DetectStatement(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_36() {
        if (jj_3R_51()) return true;
        return false;
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 19; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 19; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Reinitialise.
     */
    public void ReInit(BSParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 19; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen) c.first = null;
                        c = c.next;
                    }
                }
            }
            trace_token(token, "");
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null) jj_add_error_token(kind, i);
        } else {
            trace_scan(jj_scanpos, kind);
        }
        if (jj_scanpos.kind != kind) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
        return false;
    }

    /**
     * Get the next Token.
     */
    final public Token getNextToken() {
        if (token.next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        trace_token(token, " (in getNextToken)");
        return token;
    }

    /**
     * Get the specific Token.
     */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) t = t.next;
            else t = t.next = token_source.getNextToken();
        }
        return t;
    }

    private int jj_ntk_f() {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) return;
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            jj_entries_loop:
            for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext(); ) {
                int[] oldentry = (int[]) (it.next());
                if (oldentry.length == jj_expentry.length) {
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            continue jj_entries_loop;
                        }
                    }
                    jj_expentries.add(jj_expentry);
                    break jj_entries_loop;
                }
            }
            if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
        }
    }

    /**
     * Generate ParseException.
     */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[59];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 19; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 59; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /**
     * Enable tracing.
     */
    final public void enable_tracing() {
        trace_enabled = true;
    }

    /**
     * Disable tracing.
     */
    final public void disable_tracing() {
        trace_enabled = false;
    }

    private void trace_call(String s) {
        if (trace_enabled) {
            for (int i = 0; i < trace_indent; i++) {
                System.out.print(" ");
            }
            System.out.println("Call:   " + s);
        }
        trace_indent = trace_indent + 2;
    }

    private void trace_return(String s) {
        trace_indent = trace_indent - 2;
        if (trace_enabled) {
            for (int i = 0; i < trace_indent; i++) {
                System.out.print(" ");
            }
            System.out.println("Return: " + s);
        }
    }

    private void trace_token(Token t, String where) {
        if (trace_enabled) {
            for (int i = 0; i < trace_indent; i++) {
                System.out.print(" ");
            }
            System.out.print("Consumed token: <" + tokenImage[t.kind]);
            if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
                System.out.print(": \"" + t.image + "\"");
            }
            System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
        }
    }

    private void trace_scan(Token t1, int t2) {
        if (trace_enabled) {
            for (int i = 0; i < trace_indent; i++) {
                System.out.print(" ");
            }
            System.out.print("Visited token: <" + tokenImage[t1.kind]);
            if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
                System.out.print(": \"" + t1.image + "\"");
            }
            System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
        }
    }

    private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 15; i++) {
            try {
                JJCalls p = jj_2_rtns[i];
                do {
                    if (p.gen > jj_gen) {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch (i) {
                            case 0:
                                jj_3_1();
                                break;
                            case 1:
                                jj_3_2();
                                break;
                            case 2:
                                jj_3_3();
                                break;
                            case 3:
                                jj_3_4();
                                break;
                            case 4:
                                jj_3_5();
                                break;
                            case 5:
                                jj_3_6();
                                break;
                            case 6:
                                jj_3_7();
                                break;
                            case 7:
                                jj_3_8();
                                break;
                            case 8:
                                jj_3_9();
                                break;
                            case 9:
                                jj_3_10();
                                break;
                            case 10:
                                jj_3_11();
                                break;
                            case 11:
                                jj_3_12();
                                break;
                            case 12:
                                jj_3_13();
                                break;
                            case 13:
                                jj_3_14();
                                break;
                            case 14:
                                jj_3_15();
                                break;
                        }
                    }
                    p = p.next;
                } while (p != null);
            } catch (LookaheadSuccess ls) {
            }
        }
        jj_rescan = false;
    }

    private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    @SuppressWarnings("serial")
    static private final class LookaheadSuccess extends java.lang.Error {
    }

    static final class JJCalls {
        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}