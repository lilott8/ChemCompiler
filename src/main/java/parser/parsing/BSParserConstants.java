/* Generated By:JavaCC: Do not edit this line. BSParserConstants.java */
package parser.parsing;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface BSParserConstants {

    /**
     * End of File.
     */
    int EOF = 0;
    /**
     * RegularExpression Id.
     */
    int MIX = 6;
    /**
     * RegularExpression Id.
     */
    int SPLIT = 7;
    /**
     * RegularExpression Id.
     */
    int DRAIN = 8;
    /**
     * RegularExpression Id.
     */
    int HEAT = 9;
    /**
     * RegularExpression Id.
     */
    int FOR = 10;
    /**
     * RegularExpression Id.
     */
    int AT = 11;
    /**
     * RegularExpression Id.
     */
    int DETECT = 12;
    /**
     * RegularExpression Id.
     */
    int REPEAT = 13;
    /**
     * RegularExpression Id.
     */
    int WHILE = 14;
    /**
     * RegularExpression Id.
     */
    int IF = 15;
    /**
     * RegularExpression Id.
     */
    int ELSE_IF = 16;
    /**
     * RegularExpression Id.
     */
    int ELSE = 17;
    /**
     * RegularExpression Id.
     */
    int STATIONARY = 18;
    /**
     * RegularExpression Id.
     */
    int MANIFEST = 19;
    /**
     * RegularExpression Id.
     */
    int TIMES = 20;
    /**
     * RegularExpression Id.
     */
    int WITH = 21;
    /**
     * RegularExpression Id.
     */
    int ON = 22;
    /**
     * RegularExpression Id.
     */
    int INTO = 23;
    /**
     * RegularExpression Id.
     */
    int FUNCTION = 24;
    /**
     * RegularExpression Id.
     */
    int REAL = 25;
    /**
     * RegularExpression Id.
     */
    int NAT = 26;
    /**
     * RegularExpression Id.
     */
    int MAT = 27;
    /**
     * RegularExpression Id.
     */
    int MODULE = 28;
    /**
     * RegularExpression Id.
     */
    int ARRAY = 29;
    /**
     * RegularExpression Id.
     */
    int RETURN = 30;
    /**
     * RegularExpression Id.
     */
    int FUNCTIONS = 31;
    /**
     * RegularExpression Id.
     */
    int INSTRUCTIONS = 32;
    /**
     * RegularExpression Id.
     */
    int LPAREN = 33;
    /**
     * RegularExpression Id.
     */
    int RPAREN = 34;
    /**
     * RegularExpression Id.
     */
    int LBRACKET = 35;
    /**
     * RegularExpression Id.
     */
    int RBRACKET = 36;
    /**
     * RegularExpression Id.
     */
    int LBRACE = 37;
    /**
     * RegularExpression Id.
     */
    int RBRACE = 38;
    /**
     * RegularExpression Id.
     */
    int DOT = 39;
    /**
     * RegularExpression Id.
     */
    int AND = 40;
    /**
     * RegularExpression Id.
     */
    int OR = 41;
    /**
     * RegularExpression Id.
     */
    int ASSIGN = 42;
    /**
     * RegularExpression Id.
     */
    int BANG = 43;
    /**
     * RegularExpression Id.
     */
    int NOTEQUAL = 44;
    /**
     * RegularExpression Id.
     */
    int LESSTHAN = 45;
    /**
     * RegularExpression Id.
     */
    int LESSTHANEQUAL = 46;
    /**
     * RegularExpression Id.
     */
    int GREATERTHAN = 47;
    /**
     * RegularExpression Id.
     */
    int GREATERTHANEQUAL = 48;
    /**
     * RegularExpression Id.
     */
    int EQUALITY = 49;
    /**
     * RegularExpression Id.
     */
    int ADD = 50;
    /**
     * RegularExpression Id.
     */
    int MINUS = 51;
    /**
     * RegularExpression Id.
     */
    int MULTIPLY = 52;
    /**
     * RegularExpression Id.
     */
    int DIVIDE = 53;
    /**
     * RegularExpression Id.
     */
    int TRUE = 54;
    /**
     * RegularExpression Id.
     */
    int FALSE = 55;
    /**
     * RegularExpression Id.
     */
    int COMMA = 56;
    /**
     * RegularExpression Id.
     */
    int COLON = 57;
    /**
     * RegularExpression Id.
     */
    int INTEGER_LITERAL = 58;
    /**
     * RegularExpression Id.
     */
    int IDENTIFIER = 59;
    /**
     * RegularExpression Id.
     */
    int LETTER = 60;
    /**
     * RegularExpression Id.
     */
    int DIGIT = 61;

    /**
     * Lexical state.
     */
    int DEFAULT = 0;

    /**
     * Literal token values.
     */
    String[] tokenImage = {
            "<EOF>",
            "\" \"",
            "\"\\t\"",
            "\"\\n\"",
            "\"\\r\"",
            "\"\\f\"",
            "\"mix\"",
            "\"split\"",
            "\"drain\"",
            "\"heat\"",
            "\"for\"",
            "\"at\"",
            "\"detect\"",
            "\"repeat\"",
            "\"while\"",
            "\"if\"",
            "\"else if\"",
            "\"else\"",
            "\"stationary\"",
            "\"manifest\"",
            "\"times\"",
            "\"with\"",
            "\"on\"",
            "\"into\"",
            "\"function\"",
            "\"real\"",
            "\"nat\"",
            "\"mat\"",
            "\"module\"",
            "\"array\"",
            "\"return\"",
            "\"functions\"",
            "\"instructions\"",
            "\"(\"",
            "\")\"",
            "\"[\"",
            "\"]\"",
            "\"{\"",
            "\"}\"",
            "\".\"",
            "\"&&\"",
            "\"||\"",
            "\"=\"",
            "\"!\"",
            "\"!=\"",
            "\"<\"",
            "\"<=\"",
            "\">\"",
            "\">=\"",
            "\"==\"",
            "\"+\"",
            "\"-\"",
            "\"*\"",
            "\"/\"",
            "\"true\"",
            "\"false\"",
            "\",\"",
            "\":\"",
            "<INTEGER_LITERAL>",
            "<IDENTIFIER>",
            "<LETTER>",
            "<DIGIT>",
    };

}
