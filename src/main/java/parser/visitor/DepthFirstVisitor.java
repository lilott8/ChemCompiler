//
// Generated by JTB 1.3.2
//

package parser.visitor;

import parser.ast.*;

import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class DepthFirstVisitor implements Visitor {
    //
    // Auto class visitors--probably don't need to be overridden.
    //
    public void visit(NodeList n) {
        for (Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
            e.nextElement().accept(this);
    }

    public void visit(NodeListOptional n) {
        if (n.present())
            for (Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
                e.nextElement().accept(this);
    }

    public void visit(NodeOptional n) {
        if (n.present())
            n.node.accept(this);
    }

    public void visit(NodeSequence n) {
        for (Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
            e.nextElement().accept(this);
    }

    public void visit(NodeToken n) {
    }

    //
    // User-generated visitor methods below
    //

    /**
     * f0 -> ( Module() )*
     * f1 -> ( Stationary() )*
     * f2 -> ( Manifest() )+
     * f3 -> <FUNCTIONS>
     * f4 -> ( FunctionDefinition() )*
     * f5 -> <INSTRUCTIONS>
     * f6 -> ( Statements() )+
     * f7 -> <EOF>
     */
    public void visit(BSProgram n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        n.f6.accept(this);
        n.f7.accept(this);
    }

    /**
     * f0 -> <MODULE>
     * f1 -> Identifier()
     */
    public void visit(Module n) {
        n.f0.accept(this);
        n.f1.accept(this);
    }

    /**
     * f0 -> <STATIONARY>
     * f1 -> ( TypingList() )?
     * f2 -> PrimaryExpression()
     */
    public void visit(Stationary n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

    /**
     * f0 -> <MANIFEST>
     * f1 -> ( TypingList() )?
     * f2 -> PrimaryExpression()
     */
    public void visit(Manifest n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

    /**
     * f0 -> <FUNCTION>
     * f1 -> Identifier()
     * f2 -> <LPAREN>
     * f3 -> ( FormalParameterList() )*
     * f4 -> <RPAREN>
     * f5 -> ( <COLON> TypingList() )?
     * f6 -> <LBRACE>
     * f7 -> ( Statements() )+
     * f8 -> ( <RETURN> Identifier() )?
     * f9 -> <RBRACE>
     */
    public void visit(FunctionDefinition n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        n.f6.accept(this);
        n.f7.accept(this);
        n.f8.accept(this);
        n.f9.accept(this);
    }

    /**
     * f0 -> AssignmentStatement()
     * | BranchStatement()
     * | RepeatStatement()
     * | WhileStatement()
     * | HeatStatement()
     * | DrainStatement()
     * | FunctionInvoke()
     */
    public void visit(Statements n) {
        n.f0.accept(this);
    }

    /**
     * f0 -> ( TypingList() )*
     * f1 -> Identifier()
     * f2 -> <ASSIGN>
     * f3 -> RightOp()
     */
    public void visit(AssignmentStatement n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
    }

    /**
     * f0 -> MixStatement()
     * | DetectStatement()
     * | SplitStatement()
     * | DispenseStatement()
     * | FunctionInvoke()
     * | VariableAlias()
     */
    public void visit(RightOp n) {
        n.f0.accept(this);
    }

    /**
     * f0 -> Type()
     * f1 -> ( TypingRest() )*
     */
    public void visit(TypingList n) {
        n.f0.accept(this);
        n.f1.accept(this);
    }

    /**
     * f0 -> MatLiteral()
     * | NatLiteral()
     * | RealLiteral()
     */
    public void visit(Type n) {
        n.f0.accept(this);
    }

    /**
     * f0 -> <COMMA>
     * f1 -> Type()
     */
    public void visit(TypingRest n) {
        n.f0.accept(this);
        n.f1.accept(this);
    }

    /**
     * f0 -> FormalParameter()
     * f1 -> ( FormalParameterRest() )*
     */
    public void visit(FormalParameterList n) {
        n.f0.accept(this);
        n.f1.accept(this);
    }

    /**
     * f0 -> ( TypingList() )*
     * f1 -> Identifier()
     */
    public void visit(FormalParameter n) {
        n.f0.accept(this);
        n.f1.accept(this);
    }

    /**
     * f0 -> <COMMA>
     * f1 -> FormalParameter()
     */
    public void visit(FormalParameterRest n) {
        n.f0.accept(this);
        n.f1.accept(this);
    }

    /**
     * f0 -> <MIX>
     * f1 -> ( VolumeUnit() <OF> )?
     * f2 -> PrimaryExpression()
     * f3 -> <WITH>
     * f4 -> ( VolumeUnit() <OF> )?
     * f5 -> PrimaryExpression()
     * f6 -> ( <FOR> TimeUnit() )?
     */
    public void visit(MixStatement n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        n.f6.accept(this);
    }

    /**
     * f0 -> <SPLIT>
     * f1 -> PrimaryExpression()
     * f2 -> <INTO>
     * f3 -> IntegerLiteral()
     */
    public void visit(SplitStatement n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
    }

    /**
     * f0 -> <DRAIN>
     * f1 -> PrimaryExpression()
     */
    public void visit(DrainStatement n) {
        n.f0.accept(this);
        n.f1.accept(this);
    }

    /**
     * f0 -> <DISPENSE>
     * f1 -> ( VolumeUnit() <OF> )?
     * f2 -> Identifier()
     */
    public void visit(DispenseStatement n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

    /**
     * f0 -> <HEAT>
     * f1 -> PrimaryExpression()
     * f2 -> <AT>
     * f3 -> TempUnit()
     * f4 -> ( <FOR> TimeUnit() )?
     */
    public void visit(HeatStatement n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
    }

    /**
     * f0 -> <DETECT>
     * f1 -> PrimaryExpression()
     * f2 -> <ON>
     * f3 -> PrimaryExpression()
     * f4 -> ( <FOR> TimeUnit() )?
     */
    public void visit(DetectStatement n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
    }

    /**
     * f0 -> <REPEAT>
     * f1 -> IntegerLiteral()
     * f2 -> <TIMES>
     * f3 -> <LBRACE>
     * f4 -> ( Statements() )+
     * f5 -> <RBRACE>
     */
    public void visit(RepeatStatement n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
    }

    /**
     * f0 -> <WHILE>
     * f1 -> <LPAREN>
     * f2 -> Conditional()
     * f3 -> <RPAREN>
     * f4 -> <LBRACE>
     * f5 -> ( Statements() )+
     * f6 -> <RBRACE>
     */
    public void visit(WhileStatement n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        n.f6.accept(this);
    }

    /**
     * f0 -> <IF>
     * f1 -> <LPAREN>
     * f2 -> Identifier()
     * f3 -> Conditional()
     * f4 -> Primitives()
     * f5 -> <RPAREN>
     * f6 -> <LBRACE>
     * f7 -> ( Statements() )+
     * f8 -> <RBRACE>
     * f9 -> ( ElseIfBranchStatement() )*
     * f10 -> ( ElseBranchStatement() )?
     */
    public void visit(BranchStatement n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        n.f6.accept(this);
        n.f7.accept(this);
        n.f8.accept(this);
        n.f9.accept(this);
        n.f10.accept(this);
    }

    /**
     * f0 -> <ELSE_IF>
     * f1 -> <LPAREN>
     * f2 -> Conditional()
     * f3 -> <RPAREN>
     * f4 -> <LBRACE>
     * f5 -> ( Statements() )+
     * f6 -> <RBRACE>
     */
    public void visit(ElseIfBranchStatement n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        n.f6.accept(this);
    }

    /**
     * f0 -> <ELSE>
     * f1 -> <LBRACE>
     * f2 -> ( Statements() )+
     * f3 -> <RBRACE>
     */
    public void visit(ElseBranchStatement n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
    }

    /**
     * f0 -> <LESSTHAN>
     * | <LESSTHANEQUAL>
     * | <NOTEQUAL>
     * | <EQUALITY>
     * | <GREATERTHAN>
     * | <GREATERTHANEQUAL>
     */
    public void visit(Conditional n) {
        n.f0.accept(this);
    }

    /**
     * f0 -> ConditionalParenthesis()
     * | AndExpression()
     * | LessThanExpression()
     * | LessThanEqualExpression()
     * | GreaterThanExpression()
     * | GreaterThanEqualExpression()
     * | NotEqualExpression()
     * | EqualityExpression()
     * | OrExpression()
     */
    public void visit(TraditionalConditional n) {
        n.f0.accept(this);
    }

    /**
     * f0 -> MathParenthesis()
     * | PlusExpression()
     * | MinusExpression()
     * | TimesExpression()
     * | DivideExpression()
     */
    public void visit(MathStatement n) {
        n.f0.accept(this);
    }

    /**
     * f0 -> Identifier()
     * f1 -> <LPAREN>
     * f2 -> ( ArgumentList() )?
     * f3 -> <RPAREN>
     */
    public void visit(FunctionInvoke n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
    }

    /**
     * f0 -> AllowedArguments()
     * f1 -> ( AllowedArgumentsRest() )*
     */
    public void visit(ArgumentList n) {
        n.f0.accept(this);
        n.f1.accept(this);
    }

    /**
     * f0 -> <COMMA>
     * f1 -> AllowedArguments()
     */
    public void visit(AllowedArgumentsRest n) {
        n.f0.accept(this);
        n.f1.accept(this);
    }

    /**
     * f0 -> Identifier()
     * | TrueLiteral()
     * | FalseLiteral()
     * | IntegerLiteral()
     * | RealLiteral()
     */
    public void visit(PrimaryExpression n) {
        n.f0.accept(this);
    }

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public void visit(IntegerLiteral n) {
        n.f0.accept(this);
    }

    /**
     * f0 -> <NAT>
     */
    public void visit(NatLiteral n) {
        n.f0.accept(this);
    }

    /**
     * f0 -> <MAT>
     */
    public void visit(MatLiteral n) {
        n.f0.accept(this);
    }

    /**
     * f0 -> <REAL>
     */
    public void visit(RealLiteral n) {
        n.f0.accept(this);
    }

    /**
     * f0 -> <TRUE>
     */
    public void visit(TrueLiteral n) {
        n.f0.accept(this);
    }

    /**
     * f0 -> <FALSE>
     */
    public void visit(FalseLiteral n) {
        n.f0.accept(this);
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public void visit(Identifier n) {
        n.f0.accept(this);
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> <AND>
     * f2 -> PrimaryExpression()
     */
    public void visit(AndExpression n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> <LESSTHAN>
     * f2 -> PrimaryExpression()
     */
    public void visit(LessThanExpression n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> <LESSTHANEQUAL>
     * f2 -> PrimaryExpression()
     */
    public void visit(LessThanEqualExpression n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> <GREATERTHAN>
     * f2 -> PrimaryExpression()
     */
    public void visit(GreaterThanExpression n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> <GREATERTHANEQUAL>
     * f2 -> PrimaryExpression()
     */
    public void visit(GreaterThanEqualExpression n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> <NOTEQUAL>
     * f2 -> PrimaryExpression()
     */
    public void visit(NotEqualExpression n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> <OR>
     * f2 -> PrimaryExpression()
     */
    public void visit(EqualityExpression n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> <LESSTHAN>
     * f2 -> PrimaryExpression()
     */
    public void visit(OrExpression n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> <ADD>
     * f2 -> PrimaryExpression()
     */
    public void visit(PlusExpression n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> <MINUS>
     * f2 -> PrimaryExpression()
     */
    public void visit(MinusExpression n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> <MULTIPLY>
     * f2 -> PrimaryExpression()
     */
    public void visit(TimesExpression n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> <DIVIDE>
     * f2 -> PrimaryExpression()
     */
    public void visit(DivideExpression n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

    /**
     * f0 -> <BANG>
     * f1 -> PrimaryExpression()
     */
    public void visit(NotExpression n) {
        n.f0.accept(this);
        n.f1.accept(this);
    }

    /**
     * f0 -> <LPAREN>
     * f1 -> Conditional()
     * f2 -> <RPAREN>
     */
    public void visit(ConditionalParenthesis n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

    /**
     * f0 -> <LPAREN>
     * f1 -> MathStatement()
     * f2 -> <RPAREN>
     */
    public void visit(MathParenthesis n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

    /**
     * f0 -> Identifier()
     * | Primitives()
     */
    public void visit(AllowedArguments n) {
        n.f0.accept(this);
    }

    /**
     * f0 -> IntegerLiteral()
     * | RealLiteral()
     * | TrueLiteral()
     * | FalseLiteral()
     */
    public void visit(Primitives n) {
        n.f0.accept(this);
    }

    /**
     * f0 -> Identifier()
     */
    public void visit(VariableAlias n) {
        n.f0.accept(this);
    }

    /**
     * f0 -> IntegerLiteral()
     * f1 -> ( <SECOND> | <MILLISECOND> | <MICROSECOND> | <HOUR> | <MINUTE> )?
     */
    public void visit(TimeUnit n) {
        n.f0.accept(this);
        n.f1.accept(this);
    }

    /**
     * f0 -> IntegerLiteral()
     * f1 -> ( <LITRE> | <MILLILITRE> | <MICROLITRE> )?
     */
    public void visit(VolumeUnit n) {
        n.f0.accept(this);
        n.f1.accept(this);
    }

    /**
     * f0 -> IntegerLiteral()
     * f1 -> ( <CELSIUS> | <FAHRENHEIT> )?
     */
    public void visit(TempUnit n) {
        n.f0.accept(this);
        n.f1.accept(this);
    }

}
