//
// Generated by JTB 1.3.2
//

package parser.visitor;

import parser.ast.AndExpression;
import parser.ast.AssignmentInstruction;
import parser.ast.BSProgram;
import parser.ast.BranchStatement;
import parser.ast.DetectStatement;
import parser.ast.DrainStatement;
import parser.ast.EqualityExpression;
import parser.ast.Expression;
import parser.ast.ExpressionList;
import parser.ast.ExpressionRest;
import parser.ast.FalseLiteral;
import parser.ast.FormalParameter;
import parser.ast.FormalParameterList;
import parser.ast.FormalParameterRest;
import parser.ast.Function;
import parser.ast.FunctionInvoke;
import parser.ast.GreaterThanEqualExpression;
import parser.ast.GreaterThanExpression;
import parser.ast.HeatStatement;
import parser.ast.Identifier;
import parser.ast.InstructionAssignment;
import parser.ast.IntegerLiteral;
import parser.ast.LessThanEqualExpression;
import parser.ast.LessThanExpression;
import parser.ast.Manifest;
import parser.ast.MatLiteral;
import parser.ast.MinusExpression;
import parser.ast.MixStatement;
import parser.ast.Module;
import parser.ast.NatLiteral;
import parser.ast.NodeList;
import parser.ast.NodeListOptional;
import parser.ast.NodeOptional;
import parser.ast.NodeSequence;
import parser.ast.NodeToken;
import parser.ast.NotEqualExpression;
import parser.ast.NotExpression;
import parser.ast.OrExpression;
import parser.ast.ParenthesisExpression;
import parser.ast.PlusExpression;
import parser.ast.PrimaryExpression;
import parser.ast.RealLiteral;
import parser.ast.RepeatStatement;
import parser.ast.Sequence;
import parser.ast.SplitStatement;
import parser.ast.Statement;
import parser.ast.Stationary;
import parser.ast.TimesExpression;
import parser.ast.TrueLiteral;
import parser.ast.Type;
import parser.ast.TypingList;
import parser.ast.TypingRest;

/**
 * All GJ void visitors must implement this interface.
 */

public interface GJVoidVisitor<A> {

    //
    // GJ void Auto class visitors
    //

    public void visit(NodeList n, A argu);

    public void visit(NodeListOptional n, A argu);

    public void visit(NodeOptional n, A argu);

    public void visit(NodeSequence n, A argu);

    public void visit(NodeToken n, A argu);

    //
    // User-generated visitor methods below
    //

    /**
     * f0 -> Module()
     * f1 -> Stationary()
     * f2 -> Manifest()
     * f3 -> <INSTRUCTIONS>
     * f4 -> ( Sequence() )+
     * f5 -> <EOF>
     */
    public void visit(BSProgram n, A argu);

    /**
     * f0 -> ( <MODULE> Identifier() )*
     */
    public void visit(Module n, A argu);

    /**
     * f0 -> ( <STATIONARY> ( Type() )? PrimaryExpression() )*
     */
    public void visit(Stationary n, A argu);

    /**
     * f0 -> ( <MANIFEST> ( Type() )? PrimaryExpression() )+
     */
    public void visit(Manifest n, A argu);

    /**
     * f0 -> Function()
     * | Statement()
     */
    public void visit(Sequence n, A argu);

    /**
     * f0 -> AssignmentInstruction()
     * | BranchStatement()
     * | RepeatStatement()
     * | HeatStatement()
     * | DrainStatement()
     * | FunctionInvoke()
     */
    public void visit(Statement n, A argu);

    /**
     * f0 -> ( ( TypingList() )* Identifier() )?
     * f1 -> <ASSIGN>
     * f2 -> Expression()
     */
    public void visit(AssignmentInstruction n, A argu);

    /**
     * f0 -> <FUNCTION>
     * f1 -> Identifier()
     * f2 -> <LPAREN>
     * f3 -> ( FormalParameterList() )*
     * f4 -> <RPAREN>
     * f5 -> ( <COLON> TypingList() )?
     * f6 -> <LBRACE>
     * f7 -> ( Statement() )*
     * f8 -> ( <RETURN> Expression() )?
     * f9 -> <RBRACE>
     */
    public void visit(Function n, A argu);

    /**
     * f0 -> Type()
     * f1 -> ( TypingRest() )*
     */
    public void visit(TypingList n, A argu);

    /**
     * f0 -> MatLiteral()
     * | NatLiteral()
     * | RealLiteral()
     */
    public void visit(Type n, A argu);

    /**
     * f0 -> <COMMA>
     * f1 -> Type()
     */
    public void visit(TypingRest n, A argu);

    /**
     * f0 -> FormalParameter()
     * f1 -> ( FormalParameterRest() )*
     */
    public void visit(FormalParameterList n, A argu);

    /**
     * f0 -> ( TypingList() )*
     * f1 -> Identifier()
     */
    public void visit(FormalParameter n, A argu);

    /**
     * f0 -> <COMMA>
     * f1 -> FormalParameter()
     */
    public void visit(FormalParameterRest n, A argu);

    /**
     * f0 -> <MIX>
     * f1 -> PrimaryExpression()
     * f2 -> <WITH>
     * f3 -> PrimaryExpression()
     * f4 -> ( <FOR> IntegerLiteral() )?
     */
    public void visit(MixStatement n, A argu);

    /**
     * f0 -> <SPLIT>
     * f1 -> PrimaryExpression()
     * f2 -> <INTO>
     * f3 -> IntegerLiteral()
     */
    public void visit(SplitStatement n, A argu);

    /**
     * f0 -> <DRAIN>
     * f1 -> PrimaryExpression()
     */
    public void visit(DrainStatement n, A argu);

    /**
     * f0 -> <HEAT>
     * f1 -> PrimaryExpression()
     * f2 -> <AT>
     * f3 -> IntegerLiteral()
     * f4 -> ( <FOR> IntegerLiteral() )?
     */
    public void visit(HeatStatement n, A argu);

    /**
     * f0 -> <DETECT>
     * f1 -> PrimaryExpression()
     * f2 -> <ON>
     * f3 -> PrimaryExpression()
     * f4 -> ( <FOR> IntegerLiteral() )?
     */
    public void visit(DetectStatement n, A argu);

    /**
     * f0 -> <REPEAT>
     * f1 -> IntegerLiteral()
     * f2 -> <TIMES>
     * f3 -> <LBRACE>
     * f4 -> Statement()
     * f5 -> <RBRACE>
     */
    public void visit(RepeatStatement n, A argu);

    /**
     * f0 -> <IF> <LPAREN> Expression() <RPAREN> <LBRACE> Statement() <RBRACE>
     * | <ELSE_IF> <LPAREN> Expression() <RPAREN> <LBRACE> Statement() <RBRACE>
     * | <ELSE> <LBRACE> Statement() <RBRACE>
     */
    public void visit(BranchStatement n, A argu);

    /**
     * f0 -> AndExpression()
     * | LessThanExpression()
     * | LessThanEqualExpression()
     * | GreaterThanExpression()
     * | GreaterThanEqualExpression()
     * | NotEqualExpression()
     * | EqualityExpression()
     * | OrExpression()
     * | PlusExpression()
     * | MinusExpression()
     * | TimesExpression()
     * | FunctionInvoke()
     * | PrimaryExpression()
     * | InstructionAssignment()
     */
    public void visit(Expression n, A argu);

    /**
     * f0 -> Identifier()
     * f1 -> <LPAREN>
     * f2 -> ( ExpressionList() )?
     * f3 -> <RPAREN>
     */
    public void visit(FunctionInvoke n, A argu);

    /**
     * f0 -> Expression()
     * f1 -> ( ExpressionRest() )*
     */
    public void visit(ExpressionList n, A argu);

    /**
     * f0 -> <COMMA>
     * f1 -> Expression()
     */
    public void visit(ExpressionRest n, A argu);

    /**
     * f0 -> MixStatement()
     * | DetectStatement()
     * | SplitStatement()
     * | FunctionInvoke()
     */
    public void visit(InstructionAssignment n, A argu);

    /**
     * f0 -> IntegerLiteral()
     * | TrueLiteral()
     * | FalseLiteral()
     * | Identifier()
     * | ParenthesisExpression()
     */
    public void visit(PrimaryExpression n, A argu);

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public void visit(IntegerLiteral n, A argu);

    /**
     * f0 -> <NAT>
     */
    public void visit(NatLiteral n, A argu);

    /**
     * f0 -> <MAT>
     */
    public void visit(MatLiteral n, A argu);

    /**
     * f0 -> <REAL>
     */
    public void visit(RealLiteral n, A argu);

    /**
     * f0 -> <TRUE>
     */
    public void visit(TrueLiteral n, A argu);

    /**
     * f0 -> <FALSE>
     */
    public void visit(FalseLiteral n, A argu);

    /**
     * f0 -> <IDENTIFIER>
     */
    public void visit(Identifier n, A argu);

    /**
     * f0 -> PrimaryExpression()
     * f1 -> <AND>
     * f2 -> PrimaryExpression()
     */
    public void visit(AndExpression n, A argu);

    /**
     * f0 -> PrimaryExpression()
     * f1 -> <LESSTHAN>
     * f2 -> PrimaryExpression()
     */
    public void visit(LessThanExpression n, A argu);

    /**
     * f0 -> PrimaryExpression()
     * f1 -> <LESSTHANEQUAL>
     * f2 -> PrimaryExpression()
     */
    public void visit(LessThanEqualExpression n, A argu);

    /**
     * f0 -> PrimaryExpression()
     * f1 -> <GREATERTHAN>
     * f2 -> PrimaryExpression()
     */
    public void visit(GreaterThanExpression n, A argu);

    /**
     * f0 -> PrimaryExpression()
     * f1 -> <GREATERTHANEQUAL>
     * f2 -> PrimaryExpression()
     */
    public void visit(GreaterThanEqualExpression n, A argu);

    /**
     * f0 -> PrimaryExpression()
     * f1 -> <NOTEQUAL>
     * f2 -> PrimaryExpression()
     */
    public void visit(NotEqualExpression n, A argu);

    /**
     * f0 -> PrimaryExpression()
     * f1 -> <OR>
     * f2 -> PrimaryExpression()
     */
    public void visit(EqualityExpression n, A argu);

    /**
     * f0 -> PrimaryExpression()
     * f1 -> <LESSTHAN>
     * f2 -> PrimaryExpression()
     */
    public void visit(OrExpression n, A argu);

    /**
     * f0 -> PrimaryExpression()
     * f1 -> <ADD>
     * f2 -> PrimaryExpression()
     */
    public void visit(PlusExpression n, A argu);

    /**
     * f0 -> PrimaryExpression()
     * f1 -> <MINUS>
     * f2 -> PrimaryExpression()
     */
    public void visit(MinusExpression n, A argu);

    /**
     * f0 -> PrimaryExpression()
     * f1 -> <MULTIPLY>
     * f2 -> PrimaryExpression()
     */
    public void visit(TimesExpression n, A argu);

    /**
     * f0 -> <BANG>
     * f1 -> Expression()
     */
    public void visit(NotExpression n, A argu);

    /**
     * f0 -> <LPAREN>
     * f1 -> Expression()
     * f2 -> <RPAREN>
     */
    public void visit(ParenthesisExpression n, A argu);

}

