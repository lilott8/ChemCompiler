/*
The grammar file definition:
    https://javacc.org/javaccgrm
*/

options {
    STATIC = false;
    DEBUG_PARSER = false;
    DEBUG_LOOKAHEAD = false;
    DEBUG_TOKEN_MANAGER = false;
    ERROR_REPORTING = true;
    JAVA_UNICODE_ESCAPE = true;
}


PARSER_BEGIN(BSParser)
  package parser;
  public class BSParser {}
PARSER_END(BSParser)


/* WHITE SPACE */

SKIP:
{
    " "
|   "\t"
|   "\n"
|   "\r"
|   "\f"
}

/* KEYWORDS */

TOKEN :
{
    <MIX: "mix">
|   <SPLIT: "split">
|   <DRAIN: "drain">
|   <HEAT: "heat">
|   <FOR: "for">
|   <AT: "at">
|   <DETECT: "detect">
|   <REPEAT: "repeat">
|   <WHILE: "while">
|   <IF: "if">
|   <ELSE_IF: "else if" >
|   <ELSE: "else">
|   <STATIONARY: "stationary">
|   <MANIFEST: "manifest">
|   <TIMES: "times" >
|   <WITH: "with">
|   <ON: "on">
|   <INTO: "into">
|   <FUNCTION: "function">
|   <REAL: "real">
|   <NAT: "nat">
|   <MAT: "mat">
|   <MODULE: "module">
|   <ARRAY: "array">
|   <RETURN: "return">
|   <FUNCTIONS: "functions">
|   <INSTRUCTIONS: "instructions">
|   <OF: "of">
|   <DISPENSE: "dispense">
}


/* ARRAYS, AND OPERATORS */
TOKEN : {
    <LPAREN: "(">
|   <RPAREN: ")">
|   <LBRACKET: "[">
|   <RBRACKET: "]">
|   <LBRACE: "{">
|   <RBRACE: "}">
|   <DOT: ".">
|   <AND: "&&">
|   <OR: "||">
|   <ASSIGN: "=">
|   <BANG: "!">
|   <NOTEQUAL: "!=">
|   <LESSTHAN: "<">
|   <LESSTHANEQUAL: "<=">
|   <GREATERTHAN: ">">
|   <GREATERTHANEQUAL: ">=">
|   <EQUALITY: "==">
|   <ADD: "+">
|   <MINUS: "-">
|   <MULTIPLY: "*">
|   <DIVIDE: "/">
|   <TRUE: "true">
|   <FALSE: "false">
|   <COMMA: ",">
|   <COLON: ":">
|   <BACKWARDSLASH: "\\">
|   <UNDERSCORE: "_">
}

TOKEN : {
    <MILLISECOND: "ms">
|   <MICROSECOND: "us">
|   <SECOND: "s">
|   <MINUTE: "m">
|   <HOUR: "h">
|   <LITRE: "L">
|   <MICROLITRE: "uL">
|   <MILLILITRE: "mL">
|   <CELSIUS: "c">
|   <FAHRENHEIT: "f">
}



/* IDENTIFIERS */
TOKEN : /* LITERALS */
{
  <INTEGER_LITERAL: ( ["1"-"9"] (["0"-"9"])* | "0" ) >
}

TOKEN :
{
    <MATHOP: (<DIVIDE> | <MULTIPLY> | <ADD> | <MINUS>)+>
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>|<UNDERSCORE>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

void BSProgram() :
{}
{
    ( Module() )*
    ( Stationary() ) *
    ( Manifest() )+
    <FUNCTIONS>
    ( FunctionDefinition() )*
    <INSTRUCTIONS>
    ( Statements() )+
    <EOF>
}

void Module() :
{}
{
    <MODULE> Identifier()
}

void Stationary() :
{}
{
    <STATIONARY> (TypingList())? PrimaryExpression()
}

void Manifest() :
{}
{
    <MANIFEST> (TypingList())? PrimaryExpression()
}

void FunctionDefinition() :
{}
{
    <FUNCTION> Identifier() <LPAREN> (FormalParameterList())* <RPAREN> (<COLON> TypingList())? <LBRACE>
        (Statements())+
        (<RETURN> Identifier())?
    <RBRACE>
}

void Statements() :
{}
{
    LOOKAHEAD(AssignmentStatement())
    AssignmentStatement()
    |   BranchStatement()
    |   RepeatStatement()
    |   WhileStatement()
    |   HeatStatement()
    |   DrainStatement()
    |   FunctionInvoke()
}

void AssignmentStatement() :
{}
{
    (TypingList())* Identifier() <ASSIGN> RightOp()
}

void RightOp() :
{}
{
    LOOKAHEAD(<MIX>)
        MixStatement()
    |   LOOKAHEAD(<DETECT>)
            DetectStatement()
    |   LOOKAHEAD(<SPLIT>)
            SplitStatement()
    |   LOOKAHEAD(<DISPENSE>)
            DispenseStatement()
    |   LOOKAHEAD( <IDENTIFIER> <LPAREN> )
            FunctionInvoke()
    //|   LOOKAHEAD( (<IDENTIFIER>|<INTEGER_LITERAL>) <MATHOP> )
    //        MathStatement()
    |   VariableAlias()
}

void TypingList() :
{}
{
    Type() ( TypingRest() )*
}

void Type() :
{}
{
    LOOKAHEAD(3)
    MatLiteral()
    |   NatLiteral()
    |   RealLiteral()
}

void TypingRest() :
{}
{
    <COMMA> Type()
}

void FormalParameterList() :
{}
{
    FormalParameter() ( FormalParameterRest() )*
}

void FormalParameter() :
{}
{
    (TypingList())* Identifier()
}

void FormalParameterRest() :
{}
{
    <COMMA> FormalParameter()
}

void MixStatement() :
{}
{
    <MIX> (VolumeUnit() <OF>)? PrimaryExpression() <WITH> (VolumeUnit() <OF>)? PrimaryExpression() (<FOR> TimeUnit())?
}

void SplitStatement() :
{}
{
    <SPLIT> PrimaryExpression() <INTO> IntegerLiteral()
}

void DrainStatement() :
{}
{
    <DRAIN> PrimaryExpression()
}

void DispenseStatement() :
{}
{
    <DISPENSE> (VolumeUnit() <OF>)? Identifier()
}

void HeatStatement() :
{}
{
    <HEAT> PrimaryExpression() <AT> TempUnit()
    (<FOR> TimeUnit())?
}

void DetectStatement() :
{}
{
    <DETECT> PrimaryExpression() <ON> PrimaryExpression()
    (<FOR> TimeUnit())?
}

void RepeatStatement() :
{}
{
    <REPEAT> IntegerLiteral() <TIMES> <LBRACE> (Statements())+ <RBRACE>
}

void WhileStatement() :
{}
{
    <WHILE> <LPAREN> Conditional() <RPAREN> <LBRACE> (Statements())+ <RBRACE>
}

void BranchStatement() :
{}
{
    <IF> <LPAREN> Conditional() <RPAREN> <LBRACE> (Statements())+ <RBRACE>
    ( ElseIfBranchStatement() )*
    ( ElseBranchStatement() ) ?
}

void ElseIfBranchStatement() :
{}
{
    <ELSE_IF> <LPAREN> Conditional() <RPAREN> <LBRACE> (Statements())+ <RBRACE>
}

void ElseBranchStatement() :
{}
{
    <ELSE> <LBRACE> (Statements())+ <RBRACE>
}

void Conditional() :
{}
{
    LOOKAHEAD( <LPAREN> )
        ConditionalParenthesis()
    |   LOOKAHEAD( PrimaryExpression() <AND> )
            AndExpression()
    |   LOOKAHEAD( PrimaryExpression() <LESSTHAN> )
            LessThanExpression()
    |   LOOKAHEAD( PrimaryExpression() <LESSTHANEQUAL> )
            LessThanEqualExpression()
    |   LOOKAHEAD( PrimaryExpression() <GREATERTHAN> )
            GreaterThanExpression()
    |   LOOKAHEAD( PrimaryExpression() <GREATERTHANEQUAL> )
            GreaterThanEqualExpression()
    |   LOOKAHEAD( PrimaryExpression() <NOTEQUAL> )
            NotEqualExpression()
    |   LOOKAHEAD( PrimaryExpression() <EQUALITY> )
            EqualityExpression()
    |   LOOKAHEAD( PrimaryExpression() <OR> )
            OrExpression()
}

void MathStatement() :
{}
{
    LOOKAHEAD( <LPAREN> )
        MathParenthesis()
    |   LOOKAHEAD( PrimaryExpression() <ADD> )
            PlusExpression()
    |   LOOKAHEAD( PrimaryExpression() <MINUS> )
            MinusExpression()
    |   LOOKAHEAD( PrimaryExpression() <MULTIPLY> )
            TimesExpression()
    |   LOOKAHEAD( PrimaryExpression() <DIVIDE> )
            DivideExpression()
}

void FunctionInvoke() :
{}
{
  Identifier() <LPAREN> ( ArgumentList() )? <RPAREN>
}

void ArgumentList() :
{}
{
  AllowedArguments() ( AllowedArgumentsRest() )*
}

void AllowedArgumentsRest() :
{}
{
  <COMMA> AllowedArguments()
}

void PrimaryExpression() :
{}
{
    Identifier()
    |   TrueLiteral()
    |   FalseLiteral()
    |   IntegerLiteral()
    |   RealLiteral()
}

void IntegerLiteral() :
{}
{
  <INTEGER_LITERAL>
}

void NatLiteral() :
{}
{
    <NAT>
}

void MatLiteral() :
{}
{
    <MAT>
}

void RealLiteral() :
{}
{
    <REAL>
}

void TrueLiteral() :
{}
{
  <TRUE>
}

void FalseLiteral() :
{}
{
  <FALSE>
}

void Identifier() :
{}
{
  <IDENTIFIER>
}

void AndExpression() :
{}
{
  PrimaryExpression() <AND> PrimaryExpression()
}

void LessThanExpression() :
{}
{
  PrimaryExpression() <LESSTHAN> PrimaryExpression()
}

void LessThanEqualExpression() :
{}
{
  PrimaryExpression() <LESSTHANEQUAL> PrimaryExpression()
}

void GreaterThanExpression() :
{}
{
  PrimaryExpression() <GREATERTHAN> PrimaryExpression()
}

void GreaterThanEqualExpression() :
{}
{
  PrimaryExpression() <GREATERTHANEQUAL> PrimaryExpression()
}

void NotEqualExpression() :
{}
{
  PrimaryExpression() <NOTEQUAL> PrimaryExpression()
}

void EqualityExpression() :
{}
{
  PrimaryExpression() <OR> PrimaryExpression()
}

void OrExpression() :
{}
{
  PrimaryExpression() <LESSTHAN> PrimaryExpression()
}

void PlusExpression() :
{}
{
  PrimaryExpression() <ADD> PrimaryExpression()
}

void MinusExpression() :
{}
{
  PrimaryExpression() <MINUS> PrimaryExpression()
}

void TimesExpression() :
{}
{
  PrimaryExpression() <MULTIPLY> PrimaryExpression()
}

void DivideExpression() :
{}
{
    PrimaryExpression() <DIVIDE> PrimaryExpression()
}

void NotExpression() :
{}
{
  <BANG> PrimaryExpression()
}

void ConditionalParenthesis() :
{}
{
  <LPAREN> Conditional() <RPAREN>
}

void MathParenthesis() :
{}
{
  <LPAREN> MathStatement() <RPAREN>
}

void AllowedArguments() :
{}
{
    Identifier()
    |   Primitives()
}

void Primitives() :
{}
{
    IntegerLiteral()
    | RealLiteral()
    | TrueLiteral()
    | FalseLiteral()
}

void VariableAlias() :
{}
{
    Identifier()
}

void TimeUnit() :
{}
{
    IntegerLiteral()(<SECOND>
    |   <MILLISECOND>
    |   <MICROSECOND>
    |   <HOUR>
    |   <MINUTE>)?
}

void VolumeUnit():
{}
{
    IntegerLiteral()(<LITRE>
    |   <MILLILITRE>
    |   <MICROLITRE>)?
}

void TempUnit():
{}
{
    IntegerLiteral()(<CELSIUS>
    |   <FAHRENHEIT>)?
}
